<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE root[<!ELEMENT Rss ANY>
<!ATTLIST Rss id ID #REQUIRED>
<!ELEMENT master ANY>
<!ATTLIST master id ID #REQUIRED>
<!ELEMENT coreSections ANY>
<!ATTLIST coreSections id ID #REQUIRED>
<!ELEMENT page ANY>
<!ATTLIST page id ID #REQUIRED>
<!ELEMENT headline ANY>
<!ATTLIST headline id ID #REQUIRED>
<!ELEMENT layoutElements ANY>
<!ATTLIST layoutElements id ID #REQUIRED>
<!ELEMENT header ANY>
<!ATTLIST header id ID #REQUIRED>
<!ELEMENT footer ANY>
<!ATTLIST footer id ID #REQUIRED>
<!ELEMENT imageSection ANY>
<!ATTLIST imageSection id ID #REQUIRED>
<!ELEMENT themeTest ANY>
<!ATTLIST themeTest id ID #REQUIRED>
<!ELEMENT carousel ANY>
<!ATTLIST carousel id ID #REQUIRED>
<!ELEMENT slide ANY>
<!ATTLIST slide id ID #REQUIRED>
<!ELEMENT article ANY>
<!ATTLIST article id ID #REQUIRED>
<!ELEMENT articlesRoot ANY>
<!ATTLIST articlesRoot id ID #REQUIRED>
<!ELEMENT category ANY>
<!ATTLIST category id ID #REQUIRED>
<!ELEMENT articleText ANY>
<!ATTLIST articleText id ID #REQUIRED>
<!ELEMENT latestFromCategory ANY>
<!ATTLIST latestFromCategory id ID #REQUIRED>
<!ELEMENT artilceList ANY>
<!ATTLIST artilceList id ID #REQUIRED>
<!ELEMENT Tag ANY>
<!ATTLIST Tag id ID #REQUIRED>
<!ELEMENT articleCarousel ANY>
<!ATTLIST articleCarousel id ID #REQUIRED>
<!ELEMENT AllArticles ANY>
<!ATTLIST AllArticles id ID #REQUIRED>
<!ELEMENT Sitemap ANY>
<!ATTLIST Sitemap id ID #REQUIRED>
<!ELEMENT codeSnippet ANY>
<!ATTLIST codeSnippet id ID #REQUIRED>
<!ELEMENT latestArticles ANY>
<!ATTLIST latestArticles id ID #REQUIRED>
]>
<root id="-1">
  <master id="1050" key="f1a08441-3880-4701-b2ff-e5e0d5248033" parentID="-1" level="1" creatorID="0" sortOrder="0" createDate="2016-12-17T15:00:16" updateDate="2017-06-01T19:16:45" nodeName="Website" urlName="website" path="-1,1050" isDoc="" nodeType="1049" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="master">
    <header>1066</header>
    <footer>1067</footer>
    <umbracoInternalRedirectId>1060</umbracoInternalRedirectId>
    <title><![CDATA[Core Site ]]></title>
    <items><![CDATA[{"fieldsets":[{"properties":[{"alias":"name","value":"YouTube"},{"alias":"fontAwesomeClass","value":"fa-youtube"},{"alias":"url","value":"https://www.youtube.com/channel/UCxELkCjm42o6zTx1nzN26Dg"}],"alias":"socialLinks","disabled":true,"id":"277d605a-518b-4c69-87f2-288890c14750","releaseDate":null,"expireDate":null,"allowedMemberGroups":""},{"properties":[{"alias":"name","value":"Twitter"},{"alias":"fontAwesomeClass","value":"fa-twitter"},{"alias":"url","value":"https://twitter.com/KamilHadas"}],"alias":"socialLinks","disabled":false,"id":"fd92f1be-e1f0-49f5-969d-81fa1a46bfda","releaseDate":null,"expireDate":null,"allowedMemberGroups":""},{"properties":[{"alias":"name","value":"Facebook"},{"alias":"fontAwesomeClass","value":"fa-facebook"},{"alias":"url","value":"https://www.facebook.com/this.webdotnet/"}],"alias":"socialLinks","disabled":false,"id":"7d529562-90f9-4ce3-96bf-b6485666f37c","releaseDate":null,"expireDate":null,"allowedMemberGroups":""},{"properties":[{"alias":"name","value":"Github"},{"alias":"fontAwesomeClass","value":"fa-github"},{"alias":"url","value":"https://github.com/Haas360"}],"alias":"socialLinks","disabled":false,"id":"c92537c8-35dc-4236-a5c0-866f63b6ac69","releaseDate":null,"expireDate":null,"allowedMemberGroups":""}]}]]></items>
    <page id="1060" key="03dbecdf-7035-4c4d-9446-e3e9c0048f6c" parentID="1050" level="2" creatorID="0" sortOrder="0" createDate="2016-12-20T22:20:03" updateDate="2017-06-01T19:15:45" nodeName="Homepage" urlName="homepage" path="-1,1050,1060" isDoc="" nodeType="1054" creatorName="Admin" writerName="Admin" writerID="0" template="1053" nodeTypeAlias="page">
      <isVisibleInMenu>0</isVisibleInMenu>
      <articleCarousel id="6105" key="3119256f-3872-443c-8e31-16039d4845d0" parentID="1060" level="3" creatorID="0" sortOrder="0" createDate="2017-05-06T19:00:50" updateDate="2017-05-23T16:13:51" nodeName="Articles Carousel" urlName="articles-carousel" path="-1,1050,1060,6105" isDoc="" nodeType="6103" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleCarousel">
        <articlesPicker><![CDATA[6199,6291,4098]]></articlesPicker>
      </articleCarousel>
      <artilceList id="4103" key="625c5420-7d56-495b-9a04-62cd01ccb88d" parentID="1060" level="3" creatorID="0" sortOrder="3" createDate="2017-03-20T20:06:16" updateDate="2017-05-23T16:07:47" nodeName="Article List" urlName="article-list" path="-1,1050,1060,4103" isDoc="" nodeType="4101" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="artilceList">
        <articlesPicker><![CDATA[4092,6230,6236,6199,6265,6274]]></articlesPicker>
        <header><![CDATA[Posty z kategorii Daj Się Poznać 2017]]></header>
      </artilceList>
      <latestArticles id="6156" key="43fba581-5c17-48c7-9663-f817199fa3d0" parentID="1060" level="3" creatorID="0" sortOrder="5" createDate="2017-05-23T13:17:40" updateDate="2017-05-23T13:17:58" nodeName="Latest Articles" urlName="latest-articles" path="-1,1050,1060,6156" isDoc="" nodeType="6155" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="latestArticles">
        <header><![CDATA[Ostatnie Posty:]]></header>
      </latestArticles>
    </page>
    <page id="1080" key="a97006b7-d71b-4f43-b81e-8993ea397203" parentID="1050" level="2" creatorID="0" sortOrder="1" createDate="2017-03-10T20:47:06" updateDate="2017-06-01T19:15:17" nodeName="Theme Test" urlName="theme-test" path="-1,1050,1080" isDoc="" nodeType="1054" creatorName="Admin" writerName="Admin" writerID="0" template="1053" nodeTypeAlias="page">
      <isVisibleInMenu>0</isVisibleInMenu>
      <themeTest id="1082" key="0c43719b-552c-4d4a-803d-7225e5054625" parentID="1080" level="3" creatorID="0" sortOrder="0" createDate="2017-03-10T20:50:33" updateDate="2017-05-09T20:38:24" nodeName="Theme Test" urlName="theme-test" path="-1,1050,1080,1082" isDoc="" nodeType="1081" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="themeTest" />
    </page>
    <AllArticles id="6107" key="b483a9fa-408f-4844-958d-17b63a775474" parentID="1050" level="2" creatorID="0" sortOrder="2" createDate="2017-05-06T19:36:02" updateDate="2017-06-01T19:16:01" nodeName="Wszystkie Posty" urlName="wszystkie-posty" path="-1,1050,6107" isDoc="" nodeType="6106" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="AllArticles" />
    <page id="2081" key="1cd5d6a8-ecdd-4de1-af91-574a9ade2886" parentID="1050" level="2" creatorID="0" sortOrder="3" createDate="2017-03-11T12:18:12" updateDate="2017-06-01T19:16:01" nodeName="O mnie" urlName="o-mnie" path="-1,1050,2081" isDoc="" nodeType="1054" creatorName="Admin" writerName="Admin" writerID="0" template="1053" nodeTypeAlias="page">
      <isVisibleInMenu>1</isVisibleInMenu>
      <imageSection id="3100" key="75ebb64e-b6f0-4da6-a54d-f210a2dae673" parentID="2081" level="3" creatorID="0" sortOrder="0" createDate="2017-03-19T18:32:29" updateDate="2017-06-01T17:20:20" nodeName="Image" urlName="image" path="-1,1050,2081,3100" isDoc="" nodeType="1073" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="imageSection">
        <image><![CDATA[6301]]></image>
      </imageSection>
      <headline id="3098" key="8942ccae-0173-4ca0-a8aa-c93a3eccf047" parentID="2081" level="3" creatorID="0" sortOrder="1" createDate="2017-03-19T15:26:00" updateDate="2017-06-01T19:15:19" nodeName="O WebDotNet" urlName="o-webdotnet" path="-1,1050,2081,3098" isDoc="" nodeType="1057" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="headline">
        <body><![CDATA[<p>Projekt chodził mi po głowie od dłuższego czasu, potrzebowałem jednak impulsu by wziąć się do roboty. Zupełnie przypadkowo natrafiłem na inicjatywę "Daj się poznać" Macieja Aniserowicza. Od razu stwierdziłęm, że to ten moment i rozpocząłem pracę nad nim. Pod tagiem DajSięPoznać2017 możesz znaleźć wszystkie posty związane z inicjatywą.</p>
<p>Kod projektu jest dostępny na Githubie pod linkiem: <a href="https://github.com/Haas360/webdotnet" target="_blank" title="Github">https://github.com/Haas360/webdotnet</a></p>
<h1>O mnie</h1>
<div class="headline-body">
<p><img style="float: left; margin-right: 20px;" src="/media/1086/18195621_1284656671581686_1123552884_o.jpg?width=307&amp;height=369" alt="Foto autor Kamil Hadas" rel="6300" data-id="6300" /></p>
<p>Nazywam się Kamil Hadas. Pracuję jako fullstack developer i taka funkcja najbardziej mi odpowiada. Nie mam wykształcenia typowo branżowego, gdyż skończyłem fizykę. Miałem okazję współtworzyć różnego typu aplikacje webowe. Od ogromnej aplikacji typu "Enterprise", po znacznie mniejsze mikroserwisy i aplikacje MVC. Obecnie dokształcam się w ES6 oraz w developmencie aplikacji REST-owej za pomocą ServiceStacka i Vue.js.</p>
<p>Jeżeli masz jakieś pytania, możesz się ze mną skontaktować mailowo: webdotnetmail@gmail.com. </p>
<p>Wszelkie projekty, którymi będę chciał się podzielić z światem, będą znajdować się tu: <a href="https://github.com/Haas360">https://github.com/Haas360</a></p>
</div>]]></body>
        <header><![CDATA[O WebDotNet]]></header>
      </headline>
    </page>
    <layoutElements id="1065" key="281a1b38-8e6f-4de2-977d-151673ad4f88" parentID="1050" level="2" creatorID="0" sortOrder="4" createDate="2016-12-20T22:25:22" updateDate="2017-06-01T19:15:17" nodeName="Layout Elements" urlName="layout-elements" path="-1,1050,1065" isDoc="" nodeType="1062" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="layoutElements">
      <header id="1066" key="94bfbb80-6f91-4f6b-8767-5b2e36e0996b" parentID="1065" level="3" creatorID="0" sortOrder="0" createDate="2016-12-20T22:27:18" updateDate="2017-05-09T20:38:24" nodeName="Header" urlName="header" path="-1,1050,1065,1066" isDoc="" nodeType="1063" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="header">
        <testMessage><![CDATA[I em message forom umbraco backoffice header node]]></testMessage>
        <logo><![CDATA[6102]]></logo>
      </header>
      <footer id="1067" key="67a0d9c8-4744-4be6-a660-5e7af99ff194" parentID="1065" level="3" creatorID="0" sortOrder="1" createDate="2016-12-20T22:27:29" updateDate="2017-05-09T20:38:24" nodeName="Footer" urlName="footer" path="-1,1050,1065,1067" isDoc="" nodeType="1064" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="footer">
        <testMessage><![CDATA[I em message forom umbraco backoffice footer node]]></testMessage>
      </footer>
    </layoutElements>
    <Tag id="6095" key="640e8223-db90-466e-91c6-be50932faeab" parentID="1050" level="2" creatorID="0" sortOrder="5" createDate="2017-04-26T21:08:03" updateDate="2017-05-09T20:38:24" nodeName="View By Tag" urlName="view-by-tag" path="-1,1050,6095" isDoc="" nodeType="6094" creatorName="Admin" writerName="Admin" writerID="0" template="6096" nodeTypeAlias="Tag" />
    <page id="6111" key="0da3f52a-dfe7-4724-b66f-7899e2d613f4" parentID="1050" level="2" creatorID="0" sortOrder="6" createDate="2017-05-09T21:32:53" updateDate="2017-05-23T12:31:44" nodeName="404" urlName="404" path="-1,1050,6111" isDoc="" nodeType="1054" creatorName="Admin" writerName="Admin" writerID="0" template="1053" nodeTypeAlias="page">
      <isVisibleInMenu>0</isVisibleInMenu>
      <imageSection id="6116" key="28316038-d241-4b00-b7ff-52d23f6c541c" parentID="6111" level="3" creatorID="0" sortOrder="0" createDate="2017-05-09T21:39:03" updateDate="2017-05-09T21:39:14" nodeName="foto" urlName="foto" path="-1,1050,6111,6116" isDoc="" nodeType="1073" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="imageSection">
        <image><![CDATA[6115]]></image>
      </imageSection>
      <headline id="6114" key="4483448d-e3bf-41bf-84e5-a2d818bfe47b" parentID="6111" level="3" creatorID="0" sortOrder="1" createDate="2017-05-09T21:35:57" updateDate="2017-05-09T21:35:57" nodeName="Opis" urlName="opis" path="-1,1050,6111,6114" isDoc="" nodeType="1057" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="headline">
        <body><![CDATA[<p>Chyba gdzieś zabłądziłeś. Strona nie została odnaleziona.</p>]]></body>
        <header><![CDATA[Nie znaleziono strony]]></header>
      </headline>
    </page>
    <Rss id="6299" key="ca5f7c59-346c-44f4-844c-6eb178ecae64" parentID="1050" level="2" creatorID="0" sortOrder="7" createDate="2017-05-31T20:21:48" updateDate="2017-05-31T20:21:48" nodeName="rss" urlName="rss" path="-1,1050,6299" isDoc="" nodeType="6298" creatorName="Admin" writerName="Admin" writerID="0" template="6297" nodeTypeAlias="Rss" />
  </master>
  <articlesRoot id="2096" key="01c21a52-c0c4-466f-9d23-9dca9ea287e3" parentID="-1" level="1" creatorID="0" sortOrder="1" createDate="2017-03-18T15:38:44" updateDate="2017-05-09T21:31:38" nodeName="Articles" urlName="articles" path="-1,2096" isDoc="" nodeType="2094" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articlesRoot">
    <category id="2097" key="2ec18b91-3139-4081-8097-4bf4c859cae1" parentID="2096" level="2" creatorID="0" sortOrder="0" createDate="2017-03-18T15:39:40" updateDate="2017-05-23T17:05:34" nodeName="Daj Się Poznać 2017" urlName="daj-sie-poznac-2017" path="-1,2096,2097" isDoc="" nodeType="2095" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="category">
      <description><![CDATA[Daj Się Poznać to wyjątkowy – i wymagający! – konkurs programistyczny dla ambitnych.]]></description>
      <categoryName><![CDATA[Daj Się Poznać 2017]]></categoryName>
      <article id="2098" key="5773c536-b684-44cb-9379-beef3f13847f" parentID="2097" level="3" creatorID="0" sortOrder="0" createDate="2017-03-02T22:54:38" updateDate="2017-05-23T17:05:34" nodeName="3,2,1... Hello World!" urlName="3-2-1-hello-world" path="-1,2096,2097,2098" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Pierwszy post na blogu webdotnet.pl]]></shortDescription>
        <cardImage><![CDATA[3095]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017]]></tags>
        <title><![CDATA[3,2,1... Hello World! ]]></title>
        <articleText id="2101" key="b05d5fe4-17de-4cf4-b6e0-2a3021e6ae28" parentID="2098" level="4" creatorID="0" sortOrder="0" createDate="2017-03-18T17:56:47" updateDate="2017-05-23T17:05:34" nodeName="First Section" urlName="first-section" path="-1,2096,2097,2098,2101" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<h1 data-blogger-escaped-style="line-height: normal; margin-bottom: .0001pt; margin-bottom: 0cm;">Zawartość bloga</h1>
<p>Blog będzie swego rodzaju dokumentacją moich poczynań z projektem webdotnet i prawdopodobnie będę go kontynuował po jego zakończeniu. Dziś w skrócie opiszę projekt oraz kilka rzeczy porządkowych.</p>
<h2>Założenia w blogu i projekcie</h2>
<p>Blog będzie prowadzony w języku polskim, obecnie nie zamierzam pisać po polsku i/lub angielsku. Nie wiem jeszcze jak się to rozwinie w przyszłości.</p>
<p>Kod będzie pisany w języku angielskim wszelkie nazwy zmiennych, meto, klas, projektów, etc będą w języku angielskim.  Przez lata przyzwyczaiłem się już do tego no i chcę by mój kod był zrozumiały nie tylko dla ludzi władających językiem polskim :) Dlatego też wszystko, co znajdzie się na GitHubie, także będzie po angielsku.</p>
<p>Link do github-a: <a href="https://github.com/Haas360/webdotnet" data-blogger-escaped-target="_blank">https://github.com/Haas360/webdotnet</a></p>
<h2>O Projekcie</h2>
<p>Projekt przyszedł mi do głowy już jakiś czas temu, zrobiłem nawet podstawy. Dodałem StructureMap-a, jako IoC contener dodałem "core”, jeśli chodzi o silnie typowane widoki i to, w jaki sposób są budowane View Modele. </p>
<h2>Struktura projektu:</h2>
<p><strong>Webdotnet.Umbraco</strong> - Jest jedynie pustym projektem webowym, jedyne, co będzie się tu zmieniać tu to widoki.</p>
<p><strong>Webdotnet.Custom</strong> - Tu znajdują się wszystkie modyfikacje, które zrobiłem w umbraco np. buildery do silnie typowanych widoków, a także renderowanie całej strony w oparciu o template i to, co znajduje się w back office umbraco, szerzej o tym napiszę w następnym poście na blogu.</p>
<p><strong>Webdotnet.Frontend</strong> - Jak sama nazwa wskazuje jest to frontend aplikacji. Jeszcze nie jestem pewny czego użyje, gulpa czy webpacka (a może jeszcze coś innego), ale tu będzie się znajdował frontend budowany przez jeden z compiler-ów. Style będą w sass-ie, kompilator na wyjściu będzie mi wyrzucał zminifikowane bądź nie (w zależności od tego czy na środowisko dev czy prod) style i skrypty. Chciałbym także w skryptach móc używać ES6, będę więc będę potrzebował Babela, bądź czegoś podobnego. </p>
<p><strong>Webdotnet.Test</strong> - Tu znajdują się wszystkie testy. W miarę możliwości będę ten projekt prowadził w metodologii TDD</p>
<p><strong data-blogger-escaped-style="font-family: &quot;times new roman&quot;, serif; font-size: 18px;">Webdotnet.Db - </strong>Backup bazy danych by móc uruchomić projekt lokalnie i mieć wszystkie zmiany z umbraco</p>
<h2>Kod projektu:</h2>
<p>Na GitHubie jest dostępna instrukcja jak uruchomić projekt u siebie lokalnie. Zachęcam do pobrania, eksplorowania i komentowania samego projektu jak i jego kodu. Wszelkie sugestie mile widziane, może coś zrobiłabyś/zrobiłbyś inaczej. Tak? A dlaczego? Zachęcam do konstruktywnej krytyki. </p>
<h2>Co dalej?</h2>
<p>Docelowo projekt webdotnet ma zastąpić mój blog na platformie blogger.</p>
<p>W następnym poście postaram się omówić jak działa obecnie projekt, natomiast możesz już sprawdzić go na własną rękę. Poddajmy testowi czytelność mojego kodu. Jeśli nie wymaga zbyt wiele wyjaśnień, to znaczy, ze jest ok :) Jeśli nie wiesz, jak co powinno się zachować, pamiętaj o przeczytaniu testów, bo one są główną "dokumentacją" projektu. </p>
<p> </p>
<p>Pozdrawiam serdecznie i zapraszam Kamil Hadas</p>]]></body>
        </articleText>
      </article>
      <article id="4092" key="e9f5a48f-2023-4a83-9aa1-5309a6f26bde" parentID="2097" level="3" creatorID="0" sortOrder="1" createDate="2017-03-06T22:54:38" updateDate="2017-05-23T17:05:34" nodeName="Dlaczego Umbraco?" urlName="dlaczego-umbraco" path="-1,2096,2097,4092" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Dlaczego umbraco jako cms jest moim wyborem? Czym jest umbraco? To i jeszcze trochę w poście.]]></shortDescription>
        <cardImage><![CDATA[4094]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017,Umbraco]]></tags>
        <title><![CDATA[Dlaczego Umbraco?]]></title>
        <articleText id="6120" key="a6983f29-cfdd-4d0e-a7f4-c44ba44a624a" parentID="4092" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T11:58:09" updateDate="2017-05-23T17:05:34" nodeName="Section1" urlName="section1" path="-1,2096,2097,4092,6120" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p>Dziś post nieco bardziej techniczny. Wyjaśnię pokrótce wybór Umbraco oraz mojej modyfikacji.</p>
<h1>Dlaczego Umbraco?</h1>
<p>Od jakiegoś czasu mam przyjemność pracować z tym cms-em w biurze. Jest jednak kilka rzeczy, które zawsze chciałem zrobić nieco inaczej, z wykorzystaniem innych technik. Stąd zrodził się pomysł, by stworzyć bloga w oparciu o tą platformę. Mogę przetestować moje pomysły w praktyce. W Umbraco bardzo łatwo zarządza się zawartością strony z poziomu „Back Office”, a także pod względem implementacji, ten CMS pozostawia bardzo wiele swobody.  Nie chciałem wykorzystywać jakiegoś wielkiego kombajnu, który ma już wszystko, tylko stworzyć system „szyty na miarę”. Umbraco sprawdza się w tej kwestii bardzo dobrze.</p>
<p>Niestety Umbraco „out of the box” nie wspiera silnie typowanych widoków, więc jeśli lubimy porządek w kodzie i widoki pozbawione logiki biznesowej to trzeba coś z tym zrobić. Jest kilka różnych sposobów na to, by mieć silnie typowane widoki w umbraco. Moje rozwiązanie tego problemu jest następujące.</p>
<p>Każdy Document Type, może mieć przypisany Template, który będzie renderował widok. Najprościej jest stworzyć Template (w moim przypadku „Page”) i przypisać do określonej grupy Document typów.</p>
<p><img style="width: 810px; height: 563px;" src="/media/1018/doctypes-and-template.png?width=810&amp;height=563" alt="umbraco backoffice" rel="6122" data-id="6122" /></p>
<p><span>Teraz wystarczy stworzyć Controller który dziedziczy po RenderMvcController i nazwać go [NazwaTemplatu]Contrller. Nadpisać należy metodę Index i za każdym razem gdy ten DocumentType będzie renderowany, Metoda Index będzie wywoływana.</span></p>]]></body>
        </articleText>
        <codeSnippet id="6121" key="b2e492ff-fd49-4ce4-a2d9-1acc8762b6bc" parentID="4092" level="4" creatorID="0" sortOrder="1" createDate="2017-05-23T11:58:41" updateDate="2017-05-23T17:05:34" nodeName="code1" urlName="code1" path="-1,2096,2097,4092,6121" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[csharp]]></languagePicker>
          <code><![CDATA[public class PageController : RenderMvcController
    {
        private readonly IPageModelExtender _pageModelExtender;
        private readonly ISectionsProvider _sectionsProvider;

        public PageController(ISectionsProvider sectionsProvider, IPageModelExtender pageModelExtender)
        {
            _pageModelExtender = pageModelExtender;
            _sectionsProvider = sectionsProvider;
        }

        public override ActionResult Index(RenderModel model)
        {
            var allSections = model.Content.Children.ToList();
            var listOfSectionsToRender = _sectionsProvider.GetListOfSectionsToRender(allSections);
            var pageViewModel = new PageViewModel {Sections = listOfSectionsToRender};
            return View("Page", _pageModelExtender.ApplyLayoutToModel(pageViewModel, model.Content));
        }
    }]]></code>
        </codeSnippet>
        <articleText id="6124" key="060fa0c6-f6bf-442e-8aed-92d8bff3ed6e" parentID="4092" level="4" creatorID="0" sortOrder="2" createDate="2017-05-23T12:24:42" updateDate="2017-05-23T17:05:34" nodeName="Section2" urlName="section2" path="-1,2096,2097,4092,6124" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p><span>Przy budowie strony, przechodzę przez wszystkie dzieci Tego Noda (konkretnych implementacji Document Typu).</span></p>
<p><span><img style="width: 375px; height:477px;" src="/media/1019/node-i-dzieci.png?width=375&amp;height=477" alt="Node tree" rel="6123" data-id="6123" /></span></p>
<p> </p>
<p>Dla każdego z nich, odpalany jest odpowiedni SectionBuilder, którego odpowiedzialnością jest pobranie modelu umbraco i zwróceniu View Modelu silnie typowanego oraz wskazanie, który z widoków powinien zostać wykorzystany do zbudowania danej sekcji.</p>
<p>Interfejs ISectionBuilder:</p>]]></body>
        </articleText>
        <codeSnippet id="6125" key="cf341e88-43ca-463c-9095-1a326b50c911" parentID="4092" level="4" creatorID="0" sortOrder="3" createDate="2017-05-23T12:25:01" updateDate="2017-05-23T17:05:34" nodeName="code2" urlName="code2" path="-1,2096,2097,4092,6125" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[csharp]]></languagePicker>
          <code><![CDATA[public interface ISectionBuilder
    {
        string ViewName { get; }
        BaseViewModel CreateViewModel(IPublishedContent content);
        bool DeosApply(string documentAlias);

    }]]></code>
        </codeSnippet>
        <articleText id="6126" key="dda0de65-686d-410b-b4d4-f0956797c597" parentID="4092" level="4" creatorID="0" sortOrder="4" createDate="2017-05-23T12:25:14" updateDate="2017-05-23T17:05:34" nodeName="Section3" urlName="section3" path="-1,2096,2097,4092,6126" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p><span>Przykładowy Builder:</span></p>]]></body>
        </articleText>
        <codeSnippet id="6127" key="53995e26-3fb2-4b34-93fb-620e5f2399c4" parentID="4092" level="4" creatorID="0" sortOrder="5" createDate="2017-05-23T12:25:32" updateDate="2017-05-23T17:05:34" nodeName="code3" urlName="code3" path="-1,2096,2097,4092,6127" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[csharp]]></languagePicker>
          <code><![CDATA[public class HeaderBuilder : ISectionBuilder
    {
        public string ViewName => "HeaderView";
        public BaseViewModel CreateViewModel(IPublishedContent content)
        {
            return new HeaderViewModel
            {
                TestString = content.GetPropertyValue("testMessage")
            };
        }

        public bool DeosApply(string documentAlias)
        {
            return documentAlias == DocumentTypes.Header;
        }
    }]]></code>
        </codeSnippet>
        <articleText id="6128" key="1c434b62-d556-415e-8d97-e246533086fc" parentID="4092" level="4" creatorID="0" sortOrder="6" createDate="2017-05-23T12:25:46" updateDate="2017-05-23T17:05:34" nodeName="Section4" urlName="section4" path="-1,2096,2097,4092,6128" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p>Dzięki temu przypisuję do określonego DocTypu określony builder, a Factory zwraca mi odpowiedni Builder dla danej sekcji strony. Jest to możliwe między innymi dzięki IoC kontenerowi zastosowanemu w projekcie, jednak o tym i o budowie mojej Factory opowiem w następnym poście.</p>
<p>Do zobaczenia wkrótce :)</p>]]></body>
        </articleText>
      </article>
      <article id="4098" key="1b208ae2-1fb3-4c6a-8811-395074606025" parentID="2097" level="3" creatorID="0" sortOrder="2" createDate="2017-03-10T22:54:38" updateDate="2017-05-23T17:05:34" nodeName="Gulp" urlName="gulp" path="-1,2096,2097,4098" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Czym jest Gulp? O task runnerze i kompilatorze do frontendu.]]></shortDescription>
        <cardImage><![CDATA[4096]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017]]></tags>
        <title><![CDATA[Gulp]]></title>
        <articleText id="6138" key="31bbbabe-a676-422c-9233-c771f6ec1d8c" parentID="4098" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T12:51:42" updateDate="2017-05-23T17:05:34" nodeName="Section1" urlName="section1" path="-1,2096,2097,4098,6138" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<h1>Gulp</h1>
<p>Miało być o IoC I Faktorce budującej sekcje, jednak właśnie skończyłem pracę nad “kompilatorem” do frontendu i to właśnie o Gulpie będzie dzisiejszy post.</p>
<p>Wspominałem wcześniej, że chcę budować frontend aplikacji poprzez jakiś kompilator. Po zrobieniu researchu stwierdziłem, że Gulp będzie dobrym wyborem. Czym zatem jest Gulp? Można powiedzieć, że jest to task runner. Idea jest prosta, tworzysz sobie task, podajesz pliki źródłowe. Podłączasz do taska pluginy, które zrobią coś z Twoimi wejściowymi plikami. Każdy z nich zostanie wywołany w kolejności, w której został dodany. Na końcu podajemy plik wyjściowy, w którym otrzymamy efekt działania pluginów na plikach wejściowych. Tylko tyle i aż tyle. Gulp ma bardzo rozbudowaną bazę pluginów. Do bardzo wielu różnych zastosowań.</p>
<p>Obecna ich lista znajduje się tu: <a href="http://gulpjs.com/plugins/">http://gulpjs.com/plugins/</a></p>
<p>W moim przypadku, wykorzystuję Gulpa do:</p>
<ul>
<li>Skompilowania stylów, które są w Sass-ie do css i jeśli jest to produkcyjny build także minifikację.  </li>
<li>Skompilowania skryptów które będą w ES6 na JavaScript, który rozumieją obecne przeglądarki za pomocą babela, w devowym buildzie dodanie source mapy dla ułatwienia debuggowania, a na produkcyjny minifikację.</li>
<li>Skopiowanie fontów do folderu z assetami (korzystam z font awesome) </li>
</ul>
<p>Przykładowy Task w Gulpie:</p>]]></body>
        </articleText>
        <codeSnippet id="6139" key="bfe3930a-ad0b-4520-84dd-5d31f1299c31" parentID="4098" level="4" creatorID="0" sortOrder="1" createDate="2017-05-23T12:52:12" updateDate="2017-05-23T17:05:34" nodeName="code1" urlName="code1" path="-1,2096,2097,4098,6139" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[javascript]]></languagePicker>
          <code><![CDATA[gulp.task('sassprod', ['fonts'], function () {
    return gulp.src(scss.in) //pliki wejsciowe
        .pipe(sass(scss.sassOpts))  //skompiluj sassy
        .pipe(cssnano()) //minifikuj 
        .pipe(gulp.dest(scss.out)); //wyjsciowy plik
});]]></code>
        </codeSnippet>
        <articleText id="6140" key="300910ce-80b0-4382-8f3a-2da00dbf002f" parentID="4098" level="4" creatorID="0" sortOrder="2" createDate="2017-05-23T12:52:38" updateDate="2017-05-23T17:05:34" nodeName="Section2" urlName="section2" path="-1,2096,2097,4098,6140" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p>Jak widać, samo zrozumienie i używanie Gulpa jest proste. Zwłaszcza, jeśli ktoś ma jakieś doświadczenie np. w używaniu Power Shella lub Basha, w którym w podobny sposób możemy działać na plikach/obiektach. Problematyczne (przynajmniej dla mnie) jest jednak znalezienie wśród tych wszystkich pluginów te, które są potrzebne w projekcie. Spędziłem sporo czasu skanując sieć w poszukiwaniu różnych przykładów użycia Gulpa, aby znaleźć te pluginy, które mi się przydadzą. Czy znasz może jakieś ciekawe pluginy, które powinienem przetestować? Jeśli tak, podziel się tym w komentarzach, chętnie zerknę :).</p>
<p>Linki do stronek wyjaśniających jak działa Gulp i przykładowe użycia z których między innymi czerpałem wiedzę:</p>
<p>1. Rodzime podwórko</p>
<ul>
<li><a href="http://www.merixstudio.pl/blog/gulpjs-co-jest-i-z-czym-sie-je/">http://www.merixstudio.pl/blog/gulpjs-co-jest-i-z-czym-sie-je/</a></li>
<li><a href="https://blog.gutek.pl/2014/06/23/co-to-jest-gulp-js-czesc-1/">https://blog.gutek.pl/2014/06/23/co-to-jest-gulp-js-czesc-1/</a></li>
<li><a href="https://blog.gutek.pl/2016/02/15/co-to-jest-gulp-js-czesc-2/">https://blog.gutek.pl/2016/02/15/co-to-jest-gulp-js-czesc-2/</a></li>
<li><a href="https://blog.gutek.pl/2016/02/22/co-to-jest-gulp-js-czesc-3/">https://blog.gutek.pl/2016/02/22/co-to-jest-gulp-js-czesc-3/</a></li>
</ul>
<p>2. Po angielsku</p>
<ul>
<li><a href="https://css-tricks.com/gulp-for-beginners/">https://css-tricks.com/gulp-for-beginners/</a></li>
</ul>
<p> </p>
<p>To tyle na dziś, ja tymczasem wracam do rozwoju projektu, do następnego razu! :)</p>]]></body>
        </articleText>
      </article>
      <article id="4097" key="2cf9c79d-7364-4d7b-b987-2d467ecdff19" parentID="2097" level="3" creatorID="0" sortOrder="3" createDate="2017-03-16T22:54:38" updateDate="2017-05-23T17:05:34" nodeName="IoC contener i Umbraco" urlName="ioc-contener-i-umbraco" path="-1,2096,2097,4097" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Structure Map jako IoC contener i dlaczego to ułatwia życie.]]></shortDescription>
        <cardImage><![CDATA[4100]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017,Umbraco]]></tags>
        <title><![CDATA[IoC contener i Umbraco]]></title>
        <articleText id="6130" key="8b9a408c-e7f9-47fc-b3e9-c70fcd127373" parentID="4097" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T12:39:01" updateDate="2017-05-23T17:05:34" nodeName="Section1" urlName="section1" path="-1,2096,2097,4097,6130" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<h1>IoC contener i Umbraco</h1>
<p>Bardzo lubię concept Inversion of Controll oraz Dependency Inversion. Ucieszyłem się na wieść, że IoC Contener będzie dostępny w Umboraco 8 “out of the box”, gdyż twórcy stwierdzili, że społeczność jest już na tyle dojarzała, że udźwignie nieco bardziej zaawansowane tworzenie obiektów. ;)</p>
<p>Niestety w wersji 7 Umbraco jeszcze nie mamy IoC Contenera, ale możemy temu zaradzić instalując samemu któryś z kontenerów. Lubię korzystać z StructureMap-a i to właśnie na niego padł mój wybór. Już nie pamiętam dokładnie skąd wziąłem przykład implementacji, ale np. tu jest dostępny opis, jak to zrobić:</p>
<p><a href="https://blog.polarbits.co/2015/02/18/getting-started-with-umbraco-7-and-structuremap-v3/">https://blog.polarbits.co/2015/02/18/getting-started-with-umbraco-7-and-structuremap-v3/</a></p>
<p>Jest też nowa wersja tej biblioteki, która jest przystosowana do wersji 4 StructureMap-a i tej właśnie używam w swoim projekcie.</p>
<p>Dzięki temu, możemy korzystać z odwrócenia zależności (jednej z zasad SOLID-nego programowania) w prosty sposób. Ja używam StructureMapa do wstrzykiwania zależności w konstruktor klas. Można również za jego pomocą wstrzykiwać właściwości klas, ale ja nie jestem fanem tego rozwiązania. Moim zdaniem kod jest bardziej czytelny przy wstrzykiwaniu do konstruktorów.</p>
<p>Co zyskujemy używając „Dependency Inversion” w naszym kodzie za pomocą StructureMap-a? Postaram się to pokazać na podstawie mojego projektu J</p>
<p>W swoim kodzie mam coś takiego jak Buildery do sekcji na stronie. Żeby mieć spójną koncepcję jak wygląda Builder, wydzieliłem abstrakcję do Interfejsu, który każdy Builder musi implementować:</p>]]></body>
        </articleText>
        <codeSnippet id="6131" key="86150e17-5576-42e5-9a37-cc134b017094" parentID="4097" level="4" creatorID="0" sortOrder="1" createDate="2017-05-23T12:39:24" updateDate="2017-05-23T17:05:34" nodeName="code1" urlName="code1" path="-1,2096,2097,4097,6131" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[csharp]]></languagePicker>
          <code><![CDATA[public interface ISectionBuilder
    {
        string ViewName { get; }
        BaseViewModel CreateViewModel(IPublishedContent content);
        bool DeosApply(string documentAlias);
    }]]></code>
        </codeSnippet>
        <articleText id="6132" key="0341248c-1330-4c06-bed4-b9bf02335f99" parentID="4097" level="4" creatorID="0" sortOrder="2" createDate="2017-05-23T12:39:52" updateDate="2017-05-23T17:05:34" nodeName="Section2" urlName="section2" path="-1,2096,2097,4097,6132" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p>ViewName to Nazwa widoku (pliku cshtml) znajdującego się w folderze „Partials”, który ma zostać użyty do zbudowania sekcji.</p>
<p>Metoda DoesApply dostaje w parametrze alias noda aktualnie renderowanego i ma zwrócić czy ten builder się nada, czy też nie.</p>
<p>Ostatnia metoda jest odpowiedzialna za zbudowanie ViewModelu. Bardzo zależało mi na tym, by pozostawić ViewModele w postaci jak najczystszej (docelowo klasa z tylko i wyłącznie  właściwościami)</p>
<p>Dzięki StructureMap mogę zarejestrować wszystkie Buildery w registry:</p>]]></body>
        </articleText>
        <codeSnippet id="6133" key="9d3253d6-e7cc-4e43-ba77-18edd407f05b" parentID="4097" level="4" creatorID="0" sortOrder="3" createDate="2017-05-23T12:40:11" updateDate="2017-05-23T17:05:34" nodeName="code2" urlName="code2" path="-1,2096,2097,4097,6133" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[csharp]]></languagePicker>
          <code><![CDATA[For().Use();
     For().Use();
     For().Use();
     For().Use();
     For().Use();
     For().Use();]]></code>
        </codeSnippet>
        <articleText id="6134" key="f40d0a9a-8a9d-4bc6-8c6b-c89472275920" parentID="4097" level="4" creatorID="0" sortOrder="4" createDate="2017-05-23T12:40:28" updateDate="2017-05-23T17:05:34" nodeName="Section3" urlName="section3" path="-1,2096,2097,4097,6134" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p>W następnej kolejności stworzyłem klasę BuildersFactory, która w konstruktorze ma wstrzykiwaną listę interfejsów ISectionBuilder. Pod spodem IoC sprawdzi co zostało zarejestrowane jako implementacja ISectionBuilder i da mi wszystkie te klasy w liście. Dzięki temu, podczas renderowania danej sekcji Fabryka odpala metody DoesApply dla każdego buildera i daje wszystkie te, które potrafią obsłużyć dany node lub pierwszy Builder który się nada (w zależności od wywołanej metody). Sam Builder także posiada swój interfejs, który jest zarejestrowany podobnie jak SectionBuildery.</p>
<p>Jak do tej pory stworzyłem jeden kontroler, który będzie obsługiwał standardowe strony z Umbraco. Każdy Node typu Page będzie renderowany przez ten kontroler:</p>]]></body>
        </articleText>
        <codeSnippet id="6135" key="62d79174-2553-47b0-8d23-813cf684d3d3" parentID="4097" level="4" creatorID="0" sortOrder="5" createDate="2017-05-23T12:40:51" updateDate="2017-05-23T17:05:34" nodeName="code3" urlName="code3" path="-1,2096,2097,4097,6135" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[csharp]]></languagePicker>
          <code><![CDATA[public class PageController : RenderMvcController
    {
        private readonly IPageModelExtender _pageModelExtender;
        private readonly ISectionsProvider _sectionsProvider;

        public PageController(ISectionsProvider sectionsProvider, IPageModelExtender pageModelExtender)
        {
            _pageModelExtender = pageModelExtender;
            _sectionsProvider = sectionsProvider;
        }

        public override ActionResult Index(RenderModel model)
        {
            var allSections = model.Content.Children.ToList();
            var listOfSectionsToRender = _sectionsProvider.GetListOfSectionsToRender(allSections);
            var pageViewModel = new PageViewModel {Sections = listOfSectionsToRender};
            return View("Page", _pageModelExtender.ApplyLayoutToModel(pageViewModel, model.Content));
        }
    }]]></code>
        </codeSnippet>
        <articleText id="6136" key="8c3c6148-b986-471f-bf4e-f831936e83b0" parentID="4097" level="4" creatorID="0" sortOrder="6" createDate="2017-05-23T12:41:59" updateDate="2017-05-23T17:05:34" nodeName="Section4" urlName="section4" path="-1,2096,2097,4097,6136" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p>Zasada działania jest dość prosta. Podczas renderowania danego „Page-a”, brane są wszystkie jego dzieci (Nody będące piętro niżej w drzewku). Każde dziecko jest renderowane przez SectionBuilder, który potrafi obsłużyć dany alias. Na samym końcu, gdy mamy już listę ViewModeli oraz nazw widoków, by wyrenderować wewnątrz strony wszystkie sekcje, dokładane są header oraz footer wraz z ewentualnymi zmianami w meta tagach, gdy jest taka potrzeba.</p>
<p>Jak widać sama zasada działania jest prosta, czyli taka jak najbardziej lubię ;) Kolejnym dużym plusem stosowania IoC Contenera i wstrzykiwania zależności są znaczące ułatwienia przy testach jednostkowych. Dzięki takim bibliotekom jak Moq, możemy tworzyć „mocki” obiektów czyli takie wydmuszki, które mają np. zahardkodowaną wartość zwracaną z metod wstrzykniętych klas niezależnie od logiki w ciele tej metody. Dzięki temu możemy wyizolować testy, testować tylko i wyłącznie logikę danej klasy, nie przejmując się że coś pójdzie nie tak w jednej z klas używanej przez testowaną. Pewnie kiedyś szerzej opiszę koncepcję testów jednostkowych wykorzystujących zasadę odwróconej zależności w kodzie.</p>
<p>Uff… Jak do tej pory mój najdłuższy post, ale chciałem wyjaśnić sposób mojej implementacji J Blog nie jest na bieżąco z tym co aktualnie się dzieje w projekcie, jest trochę do tyłu. Obecnie nadal pracuję nad frontendem i rozbudową kolejnych bazowych sekcji w stronie. Mały screen na potwierdzenie, że coś się dzieje:</p>
<p><img style="width: 802px; height: 364px;" src="/media/1021/bez-tytulu.png?width=802&amp;height=364" alt="karuzela" rel="6137" data-id="6137" /> </p>
<p>I to już wszystko na dziś, do następnego razu :)</p>]]></body>
        </articleText>
      </article>
      <article id="6146" key="7946bd47-d2bf-481c-a7a0-6add06e31931" parentID="2097" level="3" creatorID="0" sortOrder="4" createDate="2017-03-18T22:54:38" updateDate="2017-05-23T17:05:34" nodeName="Sass, Bootstrap i Font Awesome" urlName="sass-bootstrap-i-font-awesome" path="-1,2096,2097,6146" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Strugtura frontendu projektu WebDotNet, jakie frameworki użyłem? Na czym bazowałem?]]></shortDescription>
        <cardImage><![CDATA[6147]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017]]></tags>
        <title><![CDATA[Sass, Bootstrap i Font Awesome]]></title>
        <articleText id="6148" key="276d3438-6fa6-4cbd-b7a0-1b899941cd37" parentID="6146" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T13:04:02" updateDate="2017-05-23T17:05:34" nodeName="Section1" urlName="section1" path="-1,2096,2097,6146,6148" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<h1>Frontend ciąg dalszy</h1>
<p>W ostatnim poście na temat Frontendu opisałem używany przeze mnie kompilator do stylów i skryptów. Dziś opiszę nieco szerzej strukturę i użyte frameworki do stylów.</p>
<p><img style="width: 500px; height:154.08805031446542px;" src="/media/1025/semantic.png?width=500&amp;height=154.08805031446542" alt="Senmantic UI logo" rel="6145" data-id="6145" /></p>
<p><img style="width: 500px; height:178.64271457085826px;" src="/media/1022/bootstrap.png?width=500&amp;height=178.64271457085826" alt="Bootstrap logo" rel="6142" data-id="6142" /></p>
<p>Zastanawiałem się na kilkoma różnymi gotowymi komponentami do frontendu. Ostatecznie wyłoniłem dwóch finalistów: Bootstrap oraz  Semantic UI. Semantic jest znacznie bardziej rozbudowany i zawiera dużo więcej gotowych modułów.  Wiąże się to jednak z tym, że „waży” znacznie więcej niż bootstrap. Oba frameworki mają to, na czym zależało mi najbardziej. Jest to grid do budowy strony oraz podstawowo zdefiniowane najbardziej potrzebne rzeczy jak buttony, checkbox-y, radio buttony itp. Finalnie wygrał Bootstrap, ponieważ jest lżejszy od semantic oraz jest gotowa wersja Sass bootstrapa (Semantic-UI jest w Less-ie, tak wiem, że można znaleźć wersję Sass zrobioną przez kogoś innego, ale chodzi mi o to, co Framework ma w standardzie). Nie zależało mi na tym by wszystko wyglądało pięknie już w samym frameworku, bo nadpisuję wygląd tak, by była to bardziej „moja” strona. Nie chciałbym też, by po wejściu na bloga było znajome uczucie „ale chamski bootstrap”.</p>
<p>Linki do obu frameworków:</p>
<p><a href="https://semantic-ui.com/">https://semantic-ui.com/</a></p>
<p><a href="http://getbootstrap.com/">http://getbootstrap.com/</a></p>
<h2>Modyfikacja Bootstrapa</h2>
<p>Dzięki temu, że bootstrap można ściągnąć w Sass-ie, mam możliwość modyfikacji poprzez nadpisywanie zmiennych, które później są używane w stylach (jeśli nie wiesz co to zmienne i jak pisze się style w Sass-ie, post na ten temat będzie w przyszłości :)).</p>]]></body>
        </articleText>
        <codeSnippet id="6149" key="c67bf1dd-8178-455d-8ce9-e48b5bc05393" parentID="6146" level="4" creatorID="0" sortOrder="1" createDate="2017-05-23T13:06:12" updateDate="2017-05-23T17:05:34" nodeName="code1" urlName="code1" path="-1,2096,2097,6146,6149" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[css]]></languagePicker>
          <code><![CDATA[//== Colors
//
//## Gray and brand colors for use across Bootstrap.

$gray-base:              #000 !default;
$gray-darker:            lighten($gray-base, 13.5%) !default; // #222
$gray-dark:              lighten($gray-base, 20%) !default;   // #333
$gray:                   lighten($gray-base, 33.5%) !default; // #555
$gray-light:             lighten($gray-base, 46.7%) !default; // #777
$gray-lighter:           lighten($gray-base, 93.5%) !default; // #eee

$brand-primary:         darken(#428bca, 6.5%) !default; // #337ab7
$brand-success:         #5cb85c !default;
$brand-info:            #5bc0de !default;
$brand-warning:         #f0ad4e !default;
$brand-danger:          #d9534f !default;]]></code>
        </codeSnippet>
        <articleText id="6150" key="d8ab86c7-afb9-4c70-8e22-1b066faf50d1" parentID="6146" level="4" creatorID="0" sortOrder="2" createDate="2017-05-23T13:07:39" updateDate="2017-05-23T17:05:34" nodeName="Section2" urlName="section2" path="-1,2096,2097,6146,6150" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p><span>Dzięki temu, w bardzo prosty sposób pozbyłem się standardowo zaokrąglonych krawędzi w komponentach bootstrapa oraz gradienty w guzikach (obie z tych rzeczy nie wyglądają dla mnie zbyt atrakcyjnie) w kilku liniach kodu. Dodatkowo, stworzyłem kilka własnych plików, które implementują nowe style lub nadpisują istniejące. Dzięki temu, tworzę stronę, która wygląda tak jak chcę, a zarazem mam dobrą bazę, która rozwiązuje za mnie wiele problemów.    </span></p>
<p><span><img style="width: 500px; height:122.38219895287958px;" src="/media/1023/font-awesome.png?width=500&amp;height=122.38219895287958" alt="Font Awesome logo" rel="6143" data-id="6143" /></span></p>
<p>Kolejnym istotnym komponentem mojego projektu jest otwarta biblioteka z ikonami Font Awesome. Ikon jest mnóstwo i bardzo łatwo się ich używa. Wystarczy jedynie dodać odpowiednią klasę, której nazwę możemy otrzymać po kliknięciu na interesującą nas ikonę.</p>
<p><img style="width: 500px; height:146.94280078895463px;" src="/media/1024/ikona-przyklad.png?width=500&amp;height=146.94280078895463" alt="przykład użycia font awesome" rel="6144" data-id="6144" /></p>
<p>Po dodaniu plików font awesome do naszego projektu, wszystkie te ikony stają się dla nas dostępne.</p>
<p>Link do Font Awesome: <a href="http://fontawesome.io/">http://fontawesome.io/</a></p>
<h2>Konfiguracja w Gulpie:</h2>
<p><span>Aby wszystko wyżej opisane zadziałało, stworzyłem cztery taski w gulpie. Dwa z nich są odpowiedzialne za skopiowanie fontów z moich folderów z kodem roboczym do docelowego.</span></p>
<p> </p>
<p> </p>]]></body>
        </articleText>
        <codeSnippet id="6151" key="fb621cfd-e719-4c61-9f59-c3ad2faf0bb2" parentID="6146" level="4" creatorID="0" sortOrder="3" createDate="2017-05-23T13:07:57" updateDate="2017-05-23T17:05:34" nodeName="code2" urlName="code2" path="-1,2096,2097,6146,6151" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[javascript]]></languagePicker>
          <code><![CDATA[gulp.task('fonts',['fonts-bootsrap'], function () {
    return gulp
        .src(fonts.in)
        .pipe(gulp.dest(fonts.out));
});
gulp.task('fonts-bootsrap', function () {
    return gulp
        .src(fonts.inBootstrap)
        .pipe(gulp.dest(fonts.out + 'bootstrap/'));
});]]></code>
        </codeSnippet>
        <articleText id="6152" key="6375a0c6-551b-4b7e-bc54-215e1aa6791e" parentID="6146" level="4" creatorID="0" sortOrder="4" createDate="2017-05-23T13:08:15" updateDate="2017-05-23T17:05:34" nodeName="Section3" urlName="section3" path="-1,2096,2097,6146,6152" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p>Task z fontami bootstrapowymi zostanie prawdopodobnie wyrzucony z finalnej wersji. Jest tam, ponieważ bootstrap bazuje na ikonach w nich zawartych i rzuca mi błędy do konsoli, a nie lubię tam czerwonych barw J.  Więc gdy tylko pozbędę się zależności w bootstrapie, wyrzucę taska i fonty z projektu.</p>
<p>Pozostałe dwa taski dotyczą kompilacji Sass-ów do plików css.</p>]]></body>
        </articleText>
        <codeSnippet id="6153" key="0526d221-f155-4949-9e0d-68b02b9851e4" parentID="6146" level="4" creatorID="0" sortOrder="5" createDate="2017-05-23T13:08:28" updateDate="2017-05-23T17:05:34" nodeName="code3" urlName="code3" path="-1,2096,2097,6146,6153" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[javascript]]></languagePicker>
          <code><![CDATA[gulp.task('sass', function () {
    return gulp.src(scss.in)
        .pipe(sass(scss.sassOpts))
        .pipe(gulp.dest(scss.out));
});

gulp.task('sassprod', function () {
    return gulp.src(scss.in)
        .pipe(sass(scss.sassOpts))
        .pipe(cssnano())
        .pipe(gulp.dest(scss.out));
});]]></code>
        </codeSnippet>
        <articleText id="6154" key="b75d82ab-8a1a-476a-bbf8-bac8c333f206" parentID="6146" level="4" creatorID="0" sortOrder="6" createDate="2017-05-23T13:08:47" updateDate="2017-05-23T17:05:34" nodeName="Section4" urlName="section4" path="-1,2096,2097,6146,6154" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p>Różnią się od siebie tylko jedną rzeczą: style produkcyjne są dodatkowo minifikowane. Task Sass jest używany, gdy kompiluję frontend na potrzeby developmnetu, dla łatwiejszej nawigacji w stylach i debugowaniu problemów. Sassprod natomiast wykorzystywany jest, gdy kompiluję style, które mają pójść na „produkcję”.</p>
<p>Tak wygląda organizacja stylów w moim projekcie. Jak do tej pory, pisze się mi go bardzo przyjemnie, choć nie mam zbyt wiele czasu. Zachęcam do komentarzy i sprawdzenia źródeł na GitHubie. Polecam również frameworki, które dziś opisałem, choć są na tyle znane, że pewnie nie muszę tego robić.</p>
<p>Do następnego razu :)</p>]]></body>
        </articleText>
      </article>
      <article id="6161" key="4b6af788-b6bd-4fc3-bb7b-b32142d0d635" parentID="2097" level="3" creatorID="0" sortOrder="5" createDate="2017-03-26T22:54:38" updateDate="2017-05-23T17:05:34" nodeName="Progres Prac" urlName="progres-prac" path="-1,2096,2097,6161" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Co zmieniło się od początku Daj Się Poznać 2017]]></shortDescription>
        <cardImage><![CDATA[6160]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017]]></tags>
        <title><![CDATA[Progres Prac]]></title>
        <articleText id="6162" key="939ea5ec-7cf9-4a6f-a188-ca63a7121a5c" parentID="6161" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T13:26:02" updateDate="2017-05-23T17:05:34" nodeName="Section1" urlName="section1" path="-1,2096,2097,6161,6162" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<h1>Progres Prac</h1>
<p>Jako, że ostatnio brakuje mi nieco czasu, to post będzie jedynie o postępach prac nad projektem i planach na najbliższy czas.</p>
<p>Większość czasu spędzam nad stylowaniem i budowaniem kolejnych komponentów aplikacji. Tu np. prototyp takiej „karty postu” do bloga.</p>
<p><img style="width: 801px; height: 301px;" src="/media/1027/przechwytywanie.png?width=801&amp;height=301" alt="karty postów" rel="6158" data-id="6158" /></p>
<p><span>Powstała także już strona „O mnie”</span></p>
<p><span><img style="width: 802px; height: 454px;" src="/media/1028/przechwytywaniew2.png?width=802&amp;height=454" alt="o webdotnet" rel="6159" data-id="6159" /></span></p>
<p> </p>
<p>Sporo czasu zajęło mi także poszukanie w sieci portali z zdjęciami, które będę mógł legalnie użyć na blogu. Obecnie w produkcji jest widok posta oraz modułów mu towarzyszących. Kolejnym elementem będzie sprawienie, by strona była bardziej „SEO friendly”. Po tym wszystkim będę mógł już dostosować homepage, puścić wszystko na „produkcję” i tym samym ustawić nową platformę dla mojego bloga. Oczywiście będzie jeszcze sporo rzeczy do zrobienia. Jednak będzie już na tyle dobrze, że obecny blog będzie wyglądał dużo lepiej niż obecnie. Stąd też decyzja o dość szybkim przeniesieniu.</p>
<p>Do zobaczenia wkrótce! </p>]]></body>
        </articleText>
      </article>
      <article id="6165" key="0c638506-bd2a-4914-a8fd-a2b595ebdcef" parentID="2097" level="3" creatorID="0" sortOrder="6" createDate="2017-03-26T23:54:38" updateDate="2017-05-23T17:05:34" nodeName="Clean Code, dlaczego to takie ważne?" urlName="clean-code-dlaczego-to-takie-wazne" path="-1,2096,2097,6165" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Dlaczego powinniśmy się przejmować by nasz kod był czytelny?]]></shortDescription>
        <cardImage><![CDATA[6164]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017]]></tags>
        <title><![CDATA[Clean Code, dlaczego to takie ważne?]]></title>
        <articleText id="6166" key="d7bc8c2e-f0d9-4e33-91c1-cdaf6574b274" parentID="6165" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T13:32:57" updateDate="2017-05-23T17:05:34" nodeName="Section1" urlName="section1" path="-1,2096,2097,6165,6166" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<h1>Clean Code, dlaczego to takie ważne?</h1>
<p>Pewnie nie raz słyszeliście, że istotne jest, by zachować dobre praktyki i wzorce projektowe. Dlaczego jednak jest aż tak ważne, po co „marnować” dodatkowo czas po to, by stosować się do tych reguł?</p>
<p>Zdobywałem doświadczenie przy bardzo dużym projekcie, który jest rozwijany już lata i z tego co wiem, wciąż się trzyma i nadal się rozrasta. Dzięki temu, że właśnie tam stawiałem swoje pierwsze kroki jako programista, mogłem od razu uczyć się programowania na całkiem dobrze napisanym projekcie. Zanim jednak opowiem o tym dlaczego „Clean Code” miał znaczenie tam, zacznę od spraw ogólnych.</p>
<p>Każda branża specjalistów ma specyficzny dla siebie język, którego używa, by opisać swoją pracę bądź napotykane problemy. Weźmy na przykład  budowanie domu. Dom składa się z wielu elementów instalacji i elementów, które trzeba stworzyć, by ktoś mógł w nim zamieszkać i by sprostał oczekiwaniom właścicieli. W budynku możemy wyznaczyć różne komponenty, jednak większość z nich zbudowana jest na bazie już funkcjonujących schematów, bo wymyślanie wszystkiego od podstaw jest znacznie droższe. Istnieją gotowe rozwiązania problemów, które budowniczy mogą napotkać, schematy są sformułowane w taki sposób, że nawet gdy inny specjalista spojrzy na to, co zrobił jego poprzednik, będzie potrafił dość szybko się odnaleźć w danej konstrukcji. Są jednak ludzie, którzy wykonują swoją pracę niechlujnie i niedbale. Tworzą elementy domu „na skróty”, chcąc w teorii zaoszczędzić. Np. elektryk kładący instalację elektryczną, podpiął pod jeden bezpiecznik zbyt dużo kabli lub (lekka skrajność, aczkolwiek sam widziałem tego typu „oszczędność”) przewody po ścianach nie były kładzione pod kątem prostym tak jak każdy inny elektryk by się spodziewał, tylko tak, by zużyć jak najmniej kabla… Brzmi absurdalnie prawa?</p>
<p>Odnieśmy to teraz do naszej branży. Gdy stosujemy się do dobrych praktyk, to tak, jakbyśmy pisali kod zgodnie ze znanymi schematami. Jeżeli możemy, korzystajmy z gotowych rozwiązań problemów nazwanych wzorcami projektowymi. Dzięki temu, gdy ktoś inny spojrzy na to rozwiązanie, zobaczy, że został użyty wzorzec fabryki i od razu będzie wiedział czego może oczekiwać. A jeśli nie wie co to właściwie jest ta fabryka, bardzo łatwo może znaleźć opis wzorca w sieci. Pisząc kod nietypowy, w którym trzeba tworzyć wszystko od zera i idąc na skróty sprawiamy, że całego modułu robiącego daną rzecz będzie nam bardzo trudno ponownie użyć w innym miejscu. Gdyby cały kod został napisany zgodnie z dobrymi praktykami, łatwo moglibyśmy wydzielić go z aplikacji i re-użyć gdzie indziej. Złudna korzyść w postaci zaoszczędzenia czasu na początku, okazuje się dwukrotnie bardziej czasochłonna podczas późniejszego pisania. Kod, który jest pisany na szybko i niechlujnie, bywa też niezrozumiały dla kogoś innego, a przecież przeważnie nad projektem pracuje cały zespół. Tak jak żaden elektryk nie spodziewa się, że kable mogą iść pod różnymi kątami, tak programiści nie spodziewają się, że zmiana logiki „dziwnego kodu” spowoduje wybuch w innej części aplikacji. A to bardzo częste w podejrzanej czystości kodzie. Dobrze napisany kod ma jeszcze jedną, bardzo ważną zaletę. Jest łatwy w testowaniu. Możemy wydzielić moduły z kodu i testować je w izolacji. Możemy też spiąć je w jeden komponent i sprawdzić jak one działają razem. Nazywamy to testami jednostkowymi i integracyjnymi.</p>
<p>Projekt, o którym pisałem na początku nie jest oczywiście ideałem. Miał bardzo wiele swoich problemów i nie wszystkie jego części były dobrze napisane. Jednak jego podstawy i fundamenty były naprawdę solidne. Dzięki zastosowaniu wzorców projektowych i pisaniu „czystego kodu” projekt był rozwijany przez lata bez większych problemów. Te konkretne podstawy umożliwiły ciągły rozwój aplikacji przez lata. Na temat dobrych praktyk programowania można napisać znacznie więcej (polecam książkę „Clean Code” Roberta Martina), jednak cel mojego postu to bardziej zainteresowanie tematem niż szczegółowe opisanie problemu. A Ty jakie masz doświadczenie jeśli chodzi o czysty kod i dobre praktyki? </p>]]></body>
        </articleText>
      </article>
      <article id="6171" key="4afd1dfd-a362-45d8-b2ae-11558545c719" parentID="2097" level="3" creatorID="0" sortOrder="7" createDate="2017-04-02T14:49:38" updateDate="2017-05-23T17:05:34" nodeName="Czysty kod. Podręcznik dobrego programisty" urlName="czysty-kod-podrecznik-dobrego-programisty" path="-1,2096,2097,6171" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Krótki opis dzieł "Uncle Bob'a"]]></shortDescription>
        <cardImage><![CDATA[6169]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017]]></tags>
        <title><![CDATA[Czysty kod. Podręcznik dobrego programisty]]></title>
        <articleText id="6172" key="30ac069d-2f4f-42c6-ad99-c15b58e1dc44" parentID="6171" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T13:40:05" updateDate="2017-05-23T17:05:34" nodeName="Section1" urlName="section1" path="-1,2096,2097,6171,6172" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<h1><span>Czysty kod. Podręcznik dobrego programisty</span></h1>
<p>Kontynuując temat z zeszłego tygodnia, dziś o świetnej książce „Czysty kod. Podręcznik dobrego programisty”.  Robert Martin opisuje, co jego zdaniem znaczy dobry jakościowy kod. Osobiście natrafiłem na nią mając już około roczny staż jako programista i jest to jedna z ważniejszych publikacji odnośnie programowania.</p>
<p><img style="width: 350px; height:466px;" src="/media/1033/czysty-kod-podrecznik-dobrego-programisty-b-iext43256635.jpg?width=350&amp;height=466" alt="okładka czysty kod" rel="6170" data-id="6170" /></p>
<p>Uważam, że każdy kto programuje obiektowo, powinien zapoznać się z tą książką. „Uncle Bob” opisuje, w jaki sposób pisać kod tak, by był łatwy do zrozumienia przez innych oraz łatwy w rozszerzaniu.  Tematy poruszane w książce to między innymi:</p>
<ul>
<li>Nazwy klas i metod</li>
<li>Funkcje i listy argumentów</li>
<li>Rozdzielanie poleceń i zapytań</li>
<li>Stosowanie wyjątków</li>
<li>Komentarze</li>
<li>Formatowanie</li>
<li>Obiekty i struktury danych</li>
<li>Obsługa błędów</li>
<li>Testy jednostkowe</li>
<li>Klasy i systemy</li>
<li>Współbieżność</li>
<li>Oczyszczanie kodu</li>
</ul>
<p>Wystarczy podstawowa wiedza z dowolnego obiektowego języka programowania, by zrozumieć treści zamieszczone w książce. Często podejście, o którym pisze Martin jest bardzo „idealistyczne” i bardzo ciężkie do zrealizowania w „prawdziwych projektach”, ale jest to dobry punkt, do którego powinniśmy dążyć w naszym kodzie.  Z własnego doświadczenia mogę też powiedzieć, ze im więcej piszemy w zgodzie z zasadami z książki, tym prostsze i bardziej naturalne się to dla nas staje. Gdy wracam do swojego kodu napisanego rok czy dwa lata temu (poza tym, że rozwiązałbym dany problem inaczej), jest on dla mnie nadal zrozumiały i łatwo wywnioskować, co robi. Dzięki wiedzy zdobytej z tej książki, stworzyłem swoją własną definicję czystego kodu.</p>
<p><img style="width: 300px; height: 452px;" src="/media/1031/56bb009c1a84f.jpg?width=300&amp;height=452" alt="Agile programowanie zwinne okładka" rel="6168" data-id="6168" /></p>
<p>Równie ważną publikację tego samego autora jest „Agile. Programowanie zwinne: zasady, wzorce i praktyki zwinnego wytwarzania oprogramowania w C#”. Możemy w niej znaleźć choćby definicję słynnego SOLID, ale to już materiał na innego posta :)</p>]]></body>
        </articleText>
      </article>
      <article id="6175" key="760e7814-4cbc-4e75-8edd-3d5b7b3b0068" parentID="2097" level="3" creatorID="0" sortOrder="8" createDate="2017-04-02T23:54:38" updateDate="2017-05-23T17:05:34" nodeName="Retrospektywa" urlName="retrospektywa" path="-1,2096,2097,6175" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Czas na małe podsumowanie :)]]></shortDescription>
        <cardImage><![CDATA[6174]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017]]></tags>
        <title><![CDATA[Retrospektywa]]></title>
        <articleText id="6176" key="8b0a8154-7ecd-4d42-b04c-b831597492ad" parentID="6175" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T13:50:26" updateDate="2017-05-23T17:05:34" nodeName="Section1" urlName="section1" path="-1,2096,2097,6175,6176" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<h1>Retrospektywa</h1>
<p>Dokładnie miesiąc temu rozpocząłem bloga i udział w „Daj się poznać 2017”. Czas na małe podsumowanie :)</p>
<p>Blogowanie i upublicznianie rzeczy które robię, jest dla mnie czymś zupełnie nowym.  Jednak nie jest to aż tak trudne jak myślałem, że będzie. Mimo bardzo krótkiego stażu bloga i projektu, udało mi się już nawiązać bardzo cenne kontakty.  Aby potrenować umiejętności miękkie oraz uczynić publiczne wystąpienia bardziej naturalnymi, rozpocząłem także współpracę ze szkołą programowania dla dzieci i młodzieży.  Nie jestem do końca zadowolony z progresu projektu, jednak biorąc pod uwagę, że jest to coś, co robię po godzinach, w wolnym czasie nie ma też tragedii.  Udało się dopracować nieco kod generujący sekcje na stronie, zbudować od zera frontend na bazie bootstrapa. Skonfigurować kompilator do stylów, skryptów i fontów oraz zbudować bazowe sekcje. Zbudowałem także prototyp wyglądu strony. Nie jestem jeszcze pewny czy finalnie będzie wyglądać tak jak teraz, ale obecny efekt nie jest najgorszy.  Zostało mi jeszcze sporo rzeczy do zrobienia, zarówno po stronie serwera jak i frontendu, zakładam jednak, że pierwszą wersję uda mi się opublikować jeszcze w tym miesiącu. Najważniejsze jest to, że udało mi się utrzymać 2 posty tygodniowo, co niekiedy było trudne i wypuszczałem 2 posty jednego dnia…</p>
<p>Aby nieco ułatwić sobie życie, chcę w najbliższym luźniejszym czasie napisać jeden lub dwa posty na zapas. W przypadku cięższego tygodnia będę miał już co publikować.  Przydałoby się także nieco bardziej usystematyzować pracę na projektem i blogiem, choć jeszcze nie wiem, w jaki sposób chciałbym to zrealizować. Jest to jednak coś, nad czym na pewno będę myślał w najbliższym czasie.</p>
<p>Podsumowując, co poszło dobrze:</p>
<ul>
<li>Dwa posty w tygodniu, mimo że czasem było ciężko</li>
<li>Progres w projekcie, pierwszy prototyp</li>
<li>Kontakty nawiązane poprzez inicjatywę</li>
<li>Ciągła nauka nowych rzeczy.</li>
</ul>
<p>Co planuję by było lepiej?</p>
<ul>
<li>Bardziej konsekwentny development</li>
<li>Usystematyzowanie prac nad blogiem i projektem</li>
<li>Posty na zapas, na cięższe tygodnie</li>
</ul>
<p>Reasumując, jestem zadowolony z efektów pracy w poprzednim miesiącu choć wiem, że mogło być lepiej. Dwa posty w tygodniu to wbrew pozorom całkiem sporo.  Plan na najbliższy czas to ukończyć prototyp i wypuścić pierwszą wersję live. Będzie się to także wiązało z przepisaniem postów z obecnej platformy na nową.</p>
<p> </p>
<p>Na dziś to już wszystko do następnego razu! :)</p>]]></body>
        </articleText>
      </article>
      <article id="6179" key="bb7628e2-b7ee-41ae-af3e-bd80c1d49d7f" parentID="2097" level="3" creatorID="0" sortOrder="9" createDate="2017-04-09T21:54:38" updateDate="2017-05-23T17:05:34" nodeName="Plan Tygodniowy" urlName="plan-tygodniowy" path="-1,2096,2097,6179" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Plan na najbliższy tydzień]]></shortDescription>
        <cardImage><![CDATA[6178]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017]]></tags>
        <title><![CDATA[Plan Tygodniowy]]></title>
        <articleText id="6180" key="4743191e-f2c7-4fe0-ae25-2c1faa2909e4" parentID="6179" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T13:55:33" updateDate="2017-05-23T17:05:34" nodeName="Section1" urlName="section1" path="-1,2096,2097,6179,6180" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<h1>Plan Tygodniowy</h1>
<p>Jako, że byłem prawie cały tydzień poza granicami naszego kraju z mocno napiętym grafikiem, nie byłem w stanie zrobić nic w projekcie. W zamian, dziś chciałbym zaprezentować plan na bieżący tydzień.</p>
<p>Pierwszą rzeczą, którą muszę się zająć jest skończenie strony postu. Zbudowałem już bazowe sekcje, jednak jeszcze nie jest to to, co chciałem osiągnąć.  Kolejnym ważnym elementem strony postu, jest sekcja rzeczy powiązanych z wyświetlanym postem.</p>
<p>W następnej kolejności będę musiał podpiąć cały projekt pod Google analitycs, aby umożliwić mi gromadzenie statystyk wyświetleń.  Chcę także umożliwić mailową subskrypcję bloga oraz udostępnić RRS feed. </p>
<p>Rzeczy wymienione wyżej są takim moim minimum, które chcę w tym tygodniu zrealizować. Z rzeczy „nice to have” byłoby także skończenie strony głównej i po wszystkim stworzenie spójnego design całej platformy.  W produkcji jest również logo, także prace trwają. Będę miał teraz więcej czasu na ten projekt, więc możesz oczekiwać obszerniejszych postów na temat pracy w nim wykonanych. Postaram się także nieco bardziej zagłębić w rzeczy realizowane na bieżąco.</p>
<p> </p>
<p>Pozdrawiam i miłego dnia! </p>]]></body>
        </articleText>
      </article>
      <article id="6184" key="f9048235-2016-4360-9aea-e862db7c7bdb" parentID="2097" level="3" creatorID="0" sortOrder="10" createDate="2017-04-09T23:54:38" updateDate="2017-05-23T17:05:34" nodeName="Software Craftsman. Profesjonalizm, czysty kod i techniczna perfekcja" urlName="software-craftsman-profesjonalizm-czysty-kod-i-techniczna-perfekcja" path="-1,2096,2097,6184" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Krótki opis książki Software Craftsman]]></shortDescription>
        <cardImage><![CDATA[6183]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017]]></tags>
        <title><![CDATA[Software Craftsman. Profesjonalizm, czysty kod i techniczna perfekcja ]]></title>
        <articleText id="6185" key="37099ff6-d966-479b-98ce-4e7230754849" parentID="6184" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T14:02:08" updateDate="2017-05-23T17:05:34" nodeName="Software Craftsman. Profesjonalizm, czysty kod i techniczna perfekcja" urlName="software-craftsman-profesjonalizm-czysty-kod-i-techniczna-perfekcja" path="-1,2096,2097,6184,6185" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<h1>Software Craftsman. Profesjonalizm, czysty kod i techniczna perfekcja </h1>
<p><span>Idąc za ciosem postów o dobrych praktykach przy pisaniu kodu, dziś o kolejnej bardzo ciekawej pozycji na ten temat.</span></p>
<p><span><img style="width: 280px; height: 400px;" src="/media/1036/2cf1ab87d92d80f662f23612c340531c-prorze.jpg?width=280&amp;height=400" alt="Software Craftsman okładka" rel="6182" data-id="6182" /></span></p>
<p> </p>
<p>Autor książki porównuje prac ę programisty, jako rzemieślnika i bardzo dobrze podsumowuje ją Robert Martin, którego książkę opisywałem tydzień temu:</p>
<p>„Jest to książka o profesjonalizmie programowania. Nie tylko o profesjonalizmie programisty, ale również o całej organizacji tworzenia oprogramowania. Jest to książka o mistrzostwie w programowaniu. Na jej stronach autor przedstawia plan, strategię, podejścia i reguły, które mogą pomóc każdemu programiście, każdemu zespołowi programistów i każdej organizacji wytwarzającej oprogramowanie w wyrwaniu się z grzęzawiska mierności i we wkroczeniu na ścieżkę profesjonalizmu, jak również w zapewnieniu większej wydajności oraz poczucia dumy z tego, co się robi.”</p>
<p>Moim zdaniem, jedną z najważniejszych rzeczy zamieszczonych w książce jest rozwinięcie koncepcji „agile”, która jest obecnie najpopularniejszą metodologią prowadzenia projektów i często postrzegana jest jako złoty środek na wszelkie problemy.  Autor objaśnia, na czym powinien polegać agile i dlaczego to, co mamy w wielu firmach to agile tylko z nazwy. Bo przecież to coś o wiele więcej niż wpakowanie pracy w sprinty i codzienne raportowanie. Często firmy adaptują agile, ale tylko te części, które im pasują, bo inne są „stratą pieniędzy”. W książce znajdziemy także opis ruchu „Software Craftsmanship”, który jest rozwinięciem metodyk programowania ekstremalnego oraz podejście do pracy jako programista-profesjonalista. Jest to bardzo ciekawa pozycja, która naświetla wiele spraw, z których  na co dzień możemy nie zdawać sobie sprawy, a są nieodłączną częścią naszej pracy.</p>
<p>Polecam ją serdecznie.</p>]]></body>
        </articleText>
      </article>
      <article id="6194" key="7dca945e-f2c0-4d0d-aaef-523b291266eb" parentID="2097" level="3" creatorID="0" sortOrder="11" createDate="2017-04-13T23:54:38" updateDate="2017-05-23T17:05:34" nodeName="Komentarze poprzez Disqus" urlName="komentarze-poprzez-disqus" path="-1,2096,2097,6194" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Jak na swojej strone dodać komentarze "Disqus"]]></shortDescription>
        <cardImage><![CDATA[6193]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017,SocialMedia]]></tags>
        <title><![CDATA[Komentarze poprzez Disqus]]></title>
        <articleText id="6195" key="b97e4e65-ef46-4397-ae42-a60c03799c54" parentID="6194" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T14:09:10" updateDate="2017-05-23T17:05:34" nodeName="Komentarze poprzez Disqus" urlName="komentarze-poprzez-disqus" path="-1,2096,2097,6194,6195" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<h1>Komentarze poprzez Disqus</h1>
<p>Dziś podjąłem się implementacji komentarzy. Zdecydowałem, że nie chcę się bawić w implementowanie ich samemu, gdyż wiązałoby się to również z implementacją użytkowników. Obecnie nie widzę potrzeby by mieć użytkowników poza możliwością komentowania, więc postanowiłem się rozejrzeć za czymś gotowym.</p>
<p>Moją uwagę przykuł Disqus, którego widziałem na wielu stronach. Ma multum opcji logowania się i wygląda bardzo ładnie :). W dzisiejszym poście będzie zatem o tym jak skonfigurować Disqus i zamieścić go na dowolnej stronie. Sama instrukcja jest na stronie producenta, jednak chciałbym pokazać jak proste i bardzo intuicyjne jest to rozwiązanie, by rozwiać wątpliwości czy warto.</p>
<p><img style="width: 500px; height:333.33333333333337px;" src="/media/1043/disqus-mmanews.jpg?width=500&amp;height=333.33333333333337" alt="logo disqus" rel="6192" data-id="6192" /></p>
<p>Pierwszą rzeczą, którą musimy zrobić jest… Założenie konta na Disqus :). Logujemy się więc na https://disqus.com/ i przechodzimy do zakładki „Get Started”.</p>
<p>Logujemy się za pomocą jednego z kont na social mediach bądź zakładamy nowe konto, jeśli nie posiadamy nawet „fejkowych” kont. Ja zalogowałem się poprzez Google.</p>
<p>Klikamy na „I want to install Disqus on my site”</p>
<p><img style="width: 378.0687397708674px; height:500px;" src="/media/1038/1.png?width=378.0687397708674&amp;height=500" alt="wybór opcji disqus" rel="6187" data-id="6187" /></p>
<p><span>Wpisujemy nazwę strony, kategorię oraz język, następnie klikamy „Create Site”</span></p>
<p><span><img style="width: 608px; height: 533px;" src="/media/1039/2.jpg?width=608&amp;height=533" alt="tworzenie nowej strony na disqus" rel="6188" data-id="6188" /></span></p>
<p>Następnym etapem jest wybór subskrypcji. Przeczytaj i zdecyduj, która Ci odpowiada najbardziej.</p>
<p>Nadszedł czas na wybór sposobu implementacji samych komentarzy na stronie. Możesz wybrać jeden z wielu gotowych pluginów, bądź skorzystać z „Universal Code”. Jako, że tworzę własnego bloga, wybrałem ten ostatni, który umożliwia implementację komentarzy na dowolnej stronie.</p>
<p> </p>
<p><img style="width: 393px; height: 565px;" src="/media/1040/3.jpg?width=393&amp;height=565" alt="gotowe opcje" rel="6189" data-id="6189" /></p>
<p>Naszym oczom ukaże się ten oto blok kodu, który z drobnymi zmianami musimy wkleić na stronę, która ma posiadać sekcję komentarzy:</p>
<p>Tak jak jest napisane interesują nas dwie rzeczy:</p>]]></body>
        </articleText>
        <codeSnippet id="6196" key="048783bc-a1fd-4dbf-a130-6f4bed059af4" parentID="6194" level="4" creatorID="0" sortOrder="1" createDate="2017-05-23T14:09:25" updateDate="2017-05-23T17:05:34" nodeName="code1" urlName="code1" path="-1,2096,2097,6194,6196" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[javascript]]></languagePicker>
          <code><![CDATA[this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable]]></code>
        </codeSnippet>
        <articleText id="6197" key="62d945d8-1090-4773-af27-9addf5c36480" parentID="6194" level="4" creatorID="0" sortOrder="2" createDate="2017-05-23T14:11:06" updateDate="2017-05-23T17:05:34" nodeName="Section2" urlName="section2" path="-1,2096,2097,6194,6197" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p>URL możemy uzyskać np. poprzez JavaScript wykorzystując „window.location.href” natomiast identifier musimy ustalić na bazie czegoś unikalnego, w moim przypadku jest to Id Noda z umbraco będącego wyświetlanym artykułem. I to tyle… Tak, to było tak proste.</p>
<p>Czas na test, sprawdzam czy wyświetla mi się sekcja komentarzy i dodaję testowy komentarz:</p>
<p><img style="width: 802px; height: 292px;" src="/media/1041/4.jpg?width=802&amp;height=292" alt="wygląd sekcji komentarzy" rel="6190" data-id="6190" /></p>
<p><span>Wygląda całkiem niesamowicie, sprawdźmy jeszcze czy widzę komentarze w panelu administracyjnym w disqus</span></p>
<p><span><img style="width: 803px; height: 220px;" src="/media/1042/5.jpg?width=803&amp;height=220" alt="panel na stronie disqus" rel="6191" data-id="6191" /></span></p>
<p>Wygląda na to, że wszystko jest w porządku. Tym oto sposobem zaoszczędziliśmy sobie mnóstwo czasu, który byłby potrzebny na wdrożenie czegoś podobnego samodzielnie i ostylowanie, by wyglądało równie ładnie.</p>
<p>To już wszystko na dziś, pozdrawiam! :)</p>
<p><span>​</span></p>]]></body>
        </articleText>
      </article>
      <article id="6199" key="bc5f51fa-00ce-498d-8a6c-1520feed226c" parentID="2097" level="3" creatorID="0" sortOrder="12" createDate="2017-04-23T21:54:38" updateDate="2017-05-23T17:05:34" nodeName="Proste Cachowanie w .NET MVC" urlName="proste-cachowanie-w-net-mvc" path="-1,2096,2097,6199" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Przykład Cachowania za pomocą „Donut Output Cache”]]></shortDescription>
        <cardImage><![CDATA[6200]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017]]></tags>
        <title><![CDATA[Proste Cachowanie w .NET MVC]]></title>
        <articleText id="6201" key="2cd450b8-6147-416f-a9f8-8511a36e568e" parentID="6199" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T14:14:17" updateDate="2017-05-23T17:05:34" nodeName="Section1" urlName="section1" path="-1,2096,2097,6199,6201" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p>Umbraco ma w sobie system cachowania contentu. Co jednak, gdybyśmy chcieli pójść o krok dalej i zrobili cachowanie jeszcze wcześniej? Po co w ogóle się tym przejmować? O tym w dzisiejszym poście.</p>
<p>Sprawdźmy więc definicję. Czym właściwie jest Cache?</p>
<p><em>„Pamięć podręczna (ang. cache) – mechanizm, w którym część spośród danych zgromadzonych w źródłach o długim czasie dostępu i niższej przepustowości jest dodatkowo przechowywana w pamięci o lepszych parametrach. Ma to na celu poprawę szybkości dostępu do tych informacji, które przypuszczalnie będą potrzebne w najbliższej przyszłości.”</em></p>
<p>Źródło Wikipedia</p>
<p>W stronach takich jak WebDotNet, czy innych, w których content nie zmienia się dynamicznie, warto zastanowić się nad cachowaniem wyników, całych requestów.  Zdecydowałem się na zastosowanie „Donut Output Cache”, który jest inspirowany standardowym w MVC Output Cachem. Oto krótki poradnik jak możesz zastosować go w swoim projekcie MVC/Umbraco.</p>
<p>Instalujemy nuget package „MvcDonutCaching”. Cachowanie za pomocą tej biblioteki polega na zapisywaniu w pamięci całych zwrotów z metod Controllerów.  W aplikacji WebDotNet mam jak na razie dwa Controllery. Pierwszy odpowiedzialny za requesty o posty, a drugi o „normalne” strony z sekcjami. Aby dodać akcję do cachowania, należy dodać atrybut do metody. Przy zwykłym projekcie MVC możemy pokusić się o coś bardzo prostego jak np.:</p>
<p> </p>]]></body>
        </articleText>
        <codeSnippet id="6202" key="7b746cdb-057f-4fce-839e-c7534e8795a9" parentID="6199" level="4" creatorID="0" sortOrder="1" createDate="2017-05-23T14:14:32" updateDate="2017-05-23T17:05:34" nodeName="code1" urlName="code1" path="-1,2096,2097,6199,6202" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[csharp]]></languagePicker>
          <code><![CDATA[[DonutOutputCache(Duration = "300")]]]></code>
        </codeSnippet>
        <articleText id="6203" key="cc1c1a34-964b-42cd-8ded-eda031246464" parentID="6199" level="4" creatorID="0" sortOrder="2" createDate="2017-05-23T14:14:48" updateDate="2017-05-23T17:05:34" nodeName="Section2" urlName="section2" path="-1,2096,2097,6199,6203" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p>Wartość zwracana zostanie w tym przypadku zapisana w pamięci na 300 sekund. Jeżeli w przeciągu tego czasu ktoś ponownie odpyta tę metodę, zwrócona zostanie wartość z pamięci, a kod z metody zostanie pominięty. W ten sposób możemy zaoszczędzić sporo czasu gdy np. nasza metoda odpytuje dodatkowo bazę danych i wykorzystuje jakiś algorytm do wyliczenia danych, które zwraca.</p>
<p>W moim przypadku musiałem pójść o krok dalej, jako że metoda Index jest wykonywana przy renderowaniu każdej strony na platformie. Musiałem więc wykorzystać dostosowany do moich potrzeb profil cachowania. Atrybut przy takim podejściu wygląda tak:</p>]]></body>
        </articleText>
        <codeSnippet id="6204" key="ce8ae30e-d52c-45f6-8854-27cddcaee45c" parentID="6199" level="4" creatorID="0" sortOrder="3" createDate="2017-05-23T14:15:02" updateDate="2017-05-23T17:05:34" nodeName="code2" urlName="code2" path="-1,2096,2097,6199,6204" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[csharp]]></languagePicker>
          <code><![CDATA[[DonutOutputCache(CacheProfile = "Page.Cache")]]]></code>
        </codeSnippet>
        <articleText id="6205" key="4f8853b4-27fc-469d-9bc5-a63a501853e0" parentID="6199" level="4" creatorID="0" sortOrder="4" createDate="2017-05-23T14:15:46" updateDate="2017-05-23T17:05:34" nodeName="Section3" urlName="section3" path="-1,2096,2097,6199,6205" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p><span>Profil jest zdefiniowany w Web.configu aplikacji:</span></p>]]></body>
        </articleText>
        <codeSnippet id="6206" key="74f7bdb9-d2f3-456f-8240-46943bb790ac" parentID="6199" level="4" creatorID="0" sortOrder="5" createDate="2017-05-23T15:14:18" updateDate="2017-05-23T17:05:34" nodeName="code2 (1)" urlName="code2-1" path="-1,2096,2097,6199,6206" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[html]]></languagePicker>
          <code><![CDATA[<caching>
      <outputcachesettings>
        <outputcacheprofiles>
          <add duration="9000000" name="Page.Cache" varybycustom="Page.Cache">
        </add></outputcacheprofiles>
      </outputcachesettings>
    </caching>]]></code>
        </codeSnippet>
        <articleText id="6207" key="41ee162d-8a54-485a-a598-a670428f4d40" parentID="6199" level="4" creatorID="0" sortOrder="6" createDate="2017-05-23T15:15:45" updateDate="2017-05-23T17:05:34" nodeName="Section1 (1)" urlName="section1-1" path="-1,2096,2097,6199,6207" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p><span>Definiujemy tu nasz profil, czas przechowywania w pamięci oraz opcjonalną (a w moim przypadku wymaganą) dedykowaną klasę, która zajmie się kreacją kluczy do cacha. Zdecydowałem się, że kluczem dla moich elementów w pamięci będzie URL strony, gdyż jest to wartość unikalna.</span></p>]]></body>
        </articleText>
        <codeSnippet id="6208" key="baa8eae1-4bb7-4608-8428-8d6e9bc79c89" parentID="6199" level="4" creatorID="0" sortOrder="7" createDate="2017-05-23T15:16:02" updateDate="2017-05-23T17:05:34" nodeName="cdfsf" urlName="cdfsf" path="-1,2096,2097,6199,6208" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[csharp]]></languagePicker>
          <code><![CDATA[public class WebdotnetApplication : UmbracoApplication
    {
        public override string GetVaryByCustomString(HttpContext context, string custom)
        {
            if (custom.Equals("Page.Cache")) 
            {
                return context.Request.Url.AbsoluteUri;
            }
            return base.GetVaryByCustomString(context, custom);
        }
    }]]></code>
        </codeSnippet>
        <articleText id="6209" key="30245085-6aa1-40d6-a7db-da152d898a25" parentID="6199" level="4" creatorID="0" sortOrder="8" createDate="2017-05-23T15:16:17" updateDate="2017-05-23T17:05:34" nodeName="Section1 (2)" urlName="section1-2" path="-1,2096,2097,6199,6209" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p><span>Aby dedykowany kreator kluczy działał, musimy zrobić jeszcze jedną rzecz. Sprawić, by dziedziczył po naszej startowej klasie, która jest zdefiniowana w Global.asax. Przeciążyć metodę  „GetVaryByCustomString” i w pliku Global zmienić bieżącą klasę na naszą klasę dziedziczącą po poprzedniej, aby zachować ówczesną funkcjonalność. </span></p>]]></body>
        </articleText>
        <codeSnippet id="6210" key="fe16b65e-4d92-4ff9-a2d2-1881fce7caea" parentID="6199" level="4" creatorID="0" sortOrder="9" createDate="2017-05-23T15:16:34" updateDate="2017-05-23T17:05:34" nodeName="Code4" urlName="code4" path="-1,2096,2097,6199,6210" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[html]]></languagePicker>
          <code><![CDATA[<%@ Application Inherits="Webdotnet.Custom.Core.WebdotnetApplication" Language="C#" %>]]></code>
        </codeSnippet>
        <articleText id="6211" key="f4ffeac7-90d2-44f9-a2dd-80c4b1f0cef8" parentID="6199" level="4" creatorID="0" sortOrder="10" createDate="2017-05-23T15:16:53" updateDate="2017-05-23T17:05:34" nodeName="Section1 (3)" urlName="section1-3" path="-1,2096,2097,6199,6211" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p><span>To by było na tyle, jeżeli chodzi o dodawanie elementów. Używając Umbraco chcemy jednak, by przy wszelkich zmianach w contencie pamięć podręczna została wyczyszczona (a przynajmniej pozycja pod zmienianym kluczem została usunięta). Pozostało nam jeszcze podpięcie się pod Eventy umbraco. Aby to zrobić, należy stworzyć klasę, która dziedziczy po „ApplicationEventHandler” i nadpisać metodę „ApplicationStarted”. W ciele tej metody należy podpiąć się pod eventy zmiany/dodawania/usuwania itp. i dodać metody modyfikujące zawartość cacha, w moim przypadku usuwające jego zawartość.</span></p>]]></body>
        </articleText>
        <codeSnippet id="6212" key="1913c3b7-3076-45d1-af3c-9aad00c532ca" parentID="6199" level="4" creatorID="0" sortOrder="11" createDate="2017-05-23T15:17:10" updateDate="2017-05-23T17:05:34" nodeName="code5" urlName="code5" path="-1,2096,2097,6199,6212" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[csharp]]></languagePicker>
          <code><![CDATA[public class UmbracoEventHandler : ApplicationEventHandler
    {
        protected override void ApplicationStarted(UmbracoApplicationBase umbracoApplication, ApplicationContext applicationContext)
        {
            ContentService.Published += UmbracoContentChangeHandler.OnPublished;
            ContentService.Created += UmbracoContentChangeHandler.OnCreated;
            ContentService.Saved += UmbracoContentChangeHandler.OnSaved;
            ContentService.Published += UmbracoContentChangeHandler.OnPublished;
            ContentService.UnPublished += UmbracoContentChangeHandler.OnUnpublished;
            ContentService.Moved += UmbracoContentChangeHandler.OnMoved;
            ContentService.Trashed += UmbracoContentChangeHandler.OnTrashed;
            ContentService.Deleted += UmbracoContentChangeHandler.OnDeleted;
        }
    }]]></code>
        </codeSnippet>
        <articleText id="6213" key="cb809ba3-c3f8-4fdb-89c0-73d4b4d60f55" parentID="6199" level="4" creatorID="0" sortOrder="12" createDate="2017-05-23T15:17:29" updateDate="2017-05-23T17:05:34" nodeName="Section1 (4)" urlName="section1-4" path="-1,2096,2097,6199,6213" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p><span>W każdej z tych metod wywołuję usuwanie elementów z cacha, kod tej metody wygląda następująco:</span></p>]]></body>
        </articleText>
        <codeSnippet id="6214" key="d18186ba-6147-4b5e-b236-5e3a74419c27" parentID="6199" level="4" creatorID="0" sortOrder="13" createDate="2017-05-23T15:18:03" updateDate="2017-05-23T17:05:34" nodeName="code" urlName="code" path="-1,2096,2097,6199,6214" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[csharp]]></languagePicker>
          <code><![CDATA[private static void RemoveItemsFromCache()
{
       var cacheManager = new OutputCacheManager();
       cacheManager.RemoveItems();
}]]></code>
        </codeSnippet>
        <articleText id="6215" key="c8f10b8d-ea74-4352-8220-750d22654a7a" parentID="6199" level="4" creatorID="0" sortOrder="14" createDate="2017-05-23T15:18:15" updateDate="2017-05-23T17:05:34" nodeName="Section1 (5)" urlName="section1-5" path="-1,2096,2097,6199,6215" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p>I to by było wszystko. W tym momencie będziemy już mieli działającego cacha wraz z usuwaniem jego elementów przy zmianach w contencie aplikacji.</p>
<p>To już wszystko na dziś, pozdrawiam Kamil.</p>]]></body>
        </articleText>
      </article>
      <article id="6221" key="4402c947-ae4f-4f73-ba8e-e0cf8d3dd9bd" parentID="2097" level="3" creatorID="0" sortOrder="13" createDate="2017-04-23T23:54:38" updateDate="2017-05-23T17:05:34" nodeName="PluralSight, Sonmez i Szafrański" urlName="pluralsight-sonmez-i-szafranski" path="-1,2096,2097,6221" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[O ludziach i zasobach mających znaczący wpływ na moją karierę]]></shortDescription>
        <cardImage><![CDATA[6217]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017]]></tags>
        <title><![CDATA[PluralSight, Sonmez i Szafrański]]></title>
        <articleText id="6222" key="d4a5e9f0-2725-4c88-b783-79be69d3b14f" parentID="6221" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T15:24:21" updateDate="2017-05-23T17:05:34" nodeName="Section1" urlName="section1" path="-1,2096,2097,6221,6222" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<h1>PluralSight, Sonmez i Szafrański</h1>
<p>Można robić wszystko po swojemu, uczyć się na swoich błędach (albo, co gorsza nie), przecierać własne szlaki. Dzięki temu wytyczymy sobie naszą ścieżkę, która w miarę postępów zamieni się już w drogę prowadzącą do finalnego celu. Można także skorzystać z wiedzy i doświadczeń innych. Zastosować sprawdzone trasy i dostosować je do własnych potrzeb. Wskoczyć na chwilę na autostradę, która znacząco przyspieszy dotarcie na miejsce, a w razie trudności zmienić pas na inny, bądź zjechać z niej, gdy widzimy, że już nie prowadzi tam gdzie chcemy jechać. Tak właśnie widzę wzorowanie się na innych i adaptację ich wiedzy oraz doświadczeń na naszej ścieżce. Takie podejście może nas uchronić od niepotrzebnych ślepych zaułków, ułatwić i przyspieszyć dotarcie do celu.</p>
<p>Post ten będzie o ludziach i zasobach, które mi znacząco pomogły (i nadal pomagają) w mojej szeroko pojętej karierze zawodowej.</p>
<h2>PluralSight</h2>
<p><img style="width: 500px; height:114.54046639231825px;" src="/media/1048/pluralsight-logo-2015.png?width=500&amp;height=114.54046639231825" alt="pluralsight logo" rel="6219" data-id="6219" /></p>
<p>Nie mam wykształcenia stricte informatycznego. Na pierwszym stopniu studiów byłem na wydziale ekonomii, a finalnie uzyskałem dyplom magistra fizyki. Jako, że specjalizacje były luźno związane z informatyką, miałem kilkakrotnie „podstawy programowania” w programie nauczania. Podstawy (pętle, deklaracja zmiennych, metod itp.) w większości języków są bardzo zbliżone i naprawdę wystarczyłoby raz pokazać jak się robi pętle for. W związku z takim akademickim „background’em” moja wiedza była niewielka. Idąc na moją pierwszą rozmowę kwalifikacyjną podkreśliłem, że niewiele umiem, ale bardzo szybko się uczę. Z takim kredytem zaufania zatrudnił mnie mój pierwszy pracodawca. Po rozpoczęciu pracy, okazało się, że firma, która mnie zaangażowała ma konto na Pluralsight. Dostałem więc login i hasło i mogłem korzystać z niego zarówno w pracy, jak i w domu. Serwis jest ogromną skarbnicą wiedzy o programowaniu. Chłonąłem kursy jeden za drugim. Uczyłem się częściowo w pracy, ale głównie w domu, by nadrobić wszelkie braki oraz uzupełnić wiedzę, która była mi potrzebna do sprawnej pracy przy projekcie. Polecam serdecznie, jako źródło wiedzy, można znaleźć tam kursy na różnym poziomie zaawansowania (a o dobre kursy dla zaawansowanych przecież tak trudno).</p>
<p>Do dzisiaj, zanim zagłębię się w jakąś nową bibliotekę, sprawdzam czy jest dostępny kurs na jej temat na tej właśnie platformie. Najbardziej utknęły mi w procesie nauki kodowania dwa nazwiska autorów.</p>
<p>Scott Allen (<a href="http://odetocode.com/about/scott-allen">http://odetocode.com/about/scott-allen</a>), który stworzył świetne kursy na temat programowania w C#, pisania aplikacji MVC czy WebApi oraz na temat frameworków JavaScript-owych. Ostatnio mocno zaangażował się w projekt Aurelia JS (<a href="http://aurelia.io/">http://aurelia.io</a>).</p>
<h2><span>John Sonmez</span></h2>
<p>Drugim autorem, któremu chciałbym poświęcić nieco więcej uwagi jest John Sonmez</p>
<p> <a href="https://simpleprogrammer.com/about-simple-programmer/">https://simpleprogrammer.com/about-simple-programmer/</a></p>
<p><img style="width: 500px; height:274.5098039215686px;" src="/media/1049/podcast-feat2-1020x560.png?width=500&amp;height=274.5098039215686" alt="john sonmez logo" rel="6220" data-id="6220" /></p>
<p><span>Pierwszy raz miałem styczność z Sonmezem właśnie na platformie Pluralsight, gdzie oglądałem kursy na temat programowania na urządzenia mobilne i szeroko pojętego programowania w .NET. Jest to człowiek, na którym się wzoruje. Przetarł on ścieżkę w wielu miejscach i czerpię od niego mnóstwo wiedzy. Ma swój kanał na Youtube, na którym często wrzuca materiały o interesującej mnie tematyce np. jak zbudować własny „Brand”, jak poprowadzić swoją karierę tak, aby przynosiła jak najwięcej satysfakcji i pieniędzy. To i wiele innych rzeczy można znaleźć u Sonmeza. Zastosowałem u siebie wiele z jego rad i zauważyłem jedynie pozytywne efekty. Z czystym sumieniem polecam.</span></p>
<h2><span>Michał Szafrański</span></h2>
<p>Ostatnim świetnym „zasobem”, z którego wiele wyciągnąłem i z powodzeniem zastosowałem jest Michał Szafrański, jego blog <a href="http://jakoszczedzacpieniadze.pl/">http://jakoszczedzacpieniadze.pl</a> oraz książka „Finansowy Ninja” .</p>
<p><img style="width: 500px; height:226.20904836193446px;" src="/media/1047/michal_szafranski_finansowy_ninja_blog_ak74.jpg?width=500&amp;height=226.20904836193446" alt="Michał Szafrański logo finansowy ninja" rel="6218" data-id="6218" /></p>
<p>W miarę jak rozwijała się moja kariera, rosły także zarobki. Jednak nie umiałem (i nadal mam z tym czasem problem) utrzymać swoich finansów w „ryzach”. Zarabiałem coraz więcej, a i tak starczało „na styk”. Podjąłem kilka głupich z finansowego punktu widzenia decyzji, których konsekwencji nie udało mi się jeszcze w pełni opanować. Blog, a zwłaszcza książka Michała, pomogły mi ogarnąć swoje finanse, przeskanować wydatki i dowiedzieć się gdzie leży problem. Dowiedziałem się, jak mogę im zaradzić i wytyczyć sobie ścieżkę do wyjścia na prostą. Nadal się jeszcze za mną pewne smrodki ciągną, ale sukcesywnie udaje mi się je redukować, budując przy tym kapitał na przyszłość. Materiały Michała pozwoliły mi spojrzeć na wiele rzeczy z zupełnie innej perspektywy oraz zobaczyć, że to co robią „wszyscy” niekoniecznie jest dobre dla mnie.</p>
<p>Osób, od których czerpię wiedzę, czy zasobów, z których się uczę jest oczywiście więcej, jednak nie chcę, aby ten post był zbyt długi. W moim dorosłym życiu (po studiach) to są osoby/zasoby, które były mi najbardziej pomocne.</p>
<p>To już wszystko na dziś.</p>
<p>Pozdrawiam, Kamil.</p>]]></body>
        </articleText>
      </article>
      <article id="6230" key="74848192-e6b1-4fde-8ba6-4bf5a4363ca6" parentID="2097" level="3" creatorID="0" sortOrder="14" createDate="2017-04-29T23:54:38" updateDate="2017-05-23T17:05:34" nodeName="Tagi w Umbraco Back Office" urlName="tagi-w-umbraco-back-office" path="-1,2096,2097,6230" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Jak dodać obsługę Tagów w Umbraco]]></shortDescription>
        <cardImage><![CDATA[6229]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017,Tagi w umbraco,Umbraco]]></tags>
        <title><![CDATA[Tagi w Umbraco Back Office]]></title>
        <articleText id="6231" key="a6fd60f3-b04a-42b1-b0d5-bc96808ef733" parentID="6230" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T15:30:26" updateDate="2017-05-23T17:05:34" nodeName="Section1" urlName="section1" path="-1,2096,2097,6230,6231" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<h1>Tagi w Umbraco Back Office</h1>
<p>Jedną z bazowych funkcji, które posiada większość blogów, jest możliwość wyświetlania postów po tagach. W tym poście będzie o tym, jak skorzystać z serwisu tagowego w umbraco, aby pobrać i wyświetlić cały content, który został oznaczony określonym Tagiem.</p>
<p>Pierwsza rzecz, którą będziemy potrzebować to możliwość nadania tagów dla określonego typu dokumentów w Umbraco.</p>
<p>Przechodzimy, zatem do Settings -&gt; Document Types i wybieramy interesujący nas DocType, w moim przypadku będzie to „Article”.  Dodajemy nową property i jako typ wybieramy Umbraco.Tags</p>
<p><img style="width: 369.2762186115214px; height:500px;" src="/media/1050/1.jpg?width=369.2762186115214&amp;height=500" alt="" rel="6224" data-id="6224" /></p>
<p><span>Przechodzimy teraz do elementu w drzewie contentu. Jak widać, jest teraz możliwość dodawania tagów. Aby dodać nowy, wystarczy wpisać nazwę i kliknąć enter. Jeżeli chcemy dorzucić istniejący, to piszemy początek jego nazwy i możemy dodać go z listy, która się wyświetli:</span></p>
<p><span><img style="width: 800px; height: 112px;" src="/media/1051/2.jpg?width=800&amp;height=112" alt="tag input" rel="6225" data-id="6225" /></span></p>
<p> </p>
<p>Sporym ułatwieniem w zarządzaniu tagami na naszej stronie jest rozszerzenie do Umbraco o nazwie „Tag Manager” <a href="https://our.umbraco.org/projects/backoffice-extensions/tag-manager/">https://our.umbraco.org/projects/backoffice-extensions/tag-manager/</a> .</p>
<p>Najprostszym sposobem, aby je zainstalować, będzie pójście do sekcji Developer -&gt; Packages w Back Office Umbraco. Wpisujemy „Tag Manager” i wybieramy ten, który właśnie tak się nazywa ;) Następnie klikamy „Install package”. Po zakończonym procesie instalacji będziemy mieli kolejny tab dostępny w CMS’ie.</p>
<p><img style="width: 348.4602917341977px; height:500px;" src="/media/1052/3.jpg?width=348.4602917341977&amp;height=500" alt="tag manager package" rel="6226" data-id="6226" /></p>
<p><span>Po przejściu do niego, naszym oczom ukaże się drzewo ze wszystkimi tagami, które utworzyliśmy w naszym systemie wraz z informacją ile dokumentów posiada dany tag:</span></p>
<p><span><img style="width: 362px; height:235px;" src="/media/1053/4.jpg?width=362&amp;height=235" alt="lista tagów" rel="6227" data-id="6227" /></span></p>
<p> </p>
<p>Klikając na konkretny Tag mamy możliwość edycji. Możliwa jest zmiana nazwy oraz przeniesienie otagowanych dokumentów do innego taga, co znacząco ułatwia wszelkiego rodzaju migracje.</p>
<p><img style="width: 720px; height: 622px;" src="/media/1054/5.jpg?width=720&amp;height=622" alt="szczegóły taga" rel="6228" data-id="6228" /></p>
<p>Kolejną bardzo przydatną rzeczą jest możliwość przejrzenia wszystkich dokumentów z contentu i mediów. W jednym miejscu widzimy nazwy tych dokumentów i możemy upewnić się czy wszystko jest w porządku. Po kliknięciu w nazwę, przenoszeni jesteśmy bezpośrednio do tego dokumentu i mamy możliwość jego edycji.  To już tyle, jeżeli chodzi o część w back Office Umbraco. Tag Service działa bardzo szybko i wszelkie informacje na ich temat są cachowane. Dzięki temu, wyszukiwanie po tagach działa dobrze i nie trzeba pisać implementacji samodzielnie. W następnym poście pokażę, jak używać Tag Service w kodzie oraz w jaki sposób zaimplementowałem wyświetlanie listy postów po tagach.</p>
<p>Pozdrawiam, Kamil.</p>
<p> </p>]]></body>
        </articleText>
      </article>
      <article id="6236" key="0fe330e6-f3e7-4a9e-8c80-de9d115399be" parentID="2097" level="3" creatorID="0" sortOrder="15" createDate="2017-04-30T23:54:38" updateDate="2017-05-23T17:05:34" nodeName="Tagi, Umbraco Tag Service" urlName="tagi-umbraco-tag-service" path="-1,2096,2097,6236" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Wykorzystanie tagów w kodzie]]></shortDescription>
        <cardImage><![CDATA[6234]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017,Tagi w umbraco,Umbraco]]></tags>
        <title><![CDATA[Tagi, Umbraco Tag Service]]></title>
        <articleText id="6237" key="f0e5a6bb-4a84-4cb1-99c8-94d3aa288604" parentID="6236" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T15:33:15" updateDate="2017-05-23T17:05:34" nodeName="Section1" urlName="section1" path="-1,2096,2097,6236,6237" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<h1><span>Tagi w Umbraco Tag Service</span></h1>
<p>W poprzednim poście opisałem jak zaimplementować do Umbraco możliwość dodawania tagów. Dziś będzie o tym, jak wykorzystać to w kodzie i umożliwić filtracje po tagach.</p>
<p>Aby mieć możliwość pobrania dokumentów z Tagiem o określonej nazwie, potrzebujemy UmbracoHelper’a. Ja stworzyłem klasę, którą wstrzykuję w miejsca gdzie potrzebuję pobrania czegokolwiek dodatkowego z Umbraco, a tak wygląda jej kluczowy element:</p>]]></body>
        </articleText>
        <codeSnippet id="6238" key="9c550d9a-5c26-4486-9ced-64323a3c5666" parentID="6236" level="4" creatorID="0" sortOrder="1" createDate="2017-05-23T15:33:32" updateDate="2017-05-23T17:05:34" nodeName="code" urlName="code" path="-1,2096,2097,6236,6238" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[csharp]]></languagePicker>
          <code><![CDATA[public class UmbracoEventHandler : ApplicationEventHandler
        private static UmbracoHelper _umbracoHelper;

        public UmbracoHelper Umbraco => _umbracoHelper ?? (_umbracoHelper = new UmbracoHelper(UmbracoContext.Current));]]></code>
        </codeSnippet>
        <articleText id="6239" key="08139994-13fe-4b19-a761-124c6f9a76d9" parentID="6236" level="4" creatorID="0" sortOrder="2" createDate="2017-05-23T15:34:03" updateDate="2017-05-23T17:05:34" nodeName="Section1 (1)" urlName="section1-1" path="-1,2096,2097,6236,6239" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p><span>Na potrzeby wyświetlania tej listy, utworzyłem nowy kontroler, który jest odpowiedzialny tylko i wyłącznie za to.</span></p>]]></body>
        </articleText>
        <codeSnippet id="6240" key="66472b2d-9318-404f-9908-14259675470f" parentID="6236" level="4" creatorID="0" sortOrder="3" createDate="2017-05-23T15:34:17" updateDate="2017-05-23T17:05:34" nodeName="code (1)" urlName="code-1" path="-1,2096,2097,6236,6240" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[csharp]]></languagePicker>
          <code><![CDATA[public class UmbracoEventHandler : ApplicationEventHandler
[DonutOutputCache(CacheProfile = "Page.Cache")]
        public override ActionResult Index(RenderModel model)
        {
            var pageViewModel = new PageViewModel();
            var extendedModel = _pageModelExtender.ApplyLayoutToModel(pageViewModel, model.Content);
            var tagName = Request.QueryString["tag"];
            var articles = new List();
            var articlesWithTag = _nodeHelper.Umbraco.TagQuery.GetContentByTag(tagName).ToList();
            var header = $"Posty otagowane {tagName}";
            articlesWithTag.ForEach(article =>
            {
                articles.Add(new ArticleCardViewModel
                {
                    Title = article.GetPropertyValue("title"),
                    ShortDescription = article.GetPropertyValue("shortDescription"),
                    Tags = article.GetPropertyValue("tags").Split(','),
                    CardImage = article.GetImage("cardImage", _nodeHelper).WithQuality(80).WithHeight(160).WithWidth(330).WithCrop(),
                    Url = article.Url
                });
            });
            var modelForArticles = new ArticleListViewModel
            {
                Title = header,
                Articles = articles
            };
            var viewModel = new ArticleByTagViewModel
            {
                Id = extendedModel.Id,
                Title = header,
                Footer = extendedModel.Footer,
                Header = extendedModel.Header,
                Description = "Lista wszystkich postów które zostały otagowane " + tagName,
                ArticlesListModel = modelForArticles
            };
            return View("Tag", viewModel);
        }]]></code>
        </codeSnippet>
        <articleText id="6241" key="79ce467c-5933-40e0-b183-fb0214eb73db" parentID="6236" level="4" creatorID="0" sortOrder="4" createDate="2017-05-23T15:35:01" updateDate="2017-05-23T17:05:34" nodeName="Section1 (2)" urlName="section1-2" path="-1,2096,2097,6236,6241" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p>Kod odpowiedzialny za pobranie wszystkich dokumentów z określonym tagiem to zmienna „articlesWithTag”. Po drodze tworzę także dodatkowe modele i pakuję w odpowiadającą mi strukturę tak, by widok mógł pozostać czysty.</p>
<p>Nazwę taga, który ma być brany pod uwagę, pobieram z parametru w linku (patrz zmienna „tagName”). Jeżeli chodzi o razora, to reużyłem istniejący widok kart postów, skorzystałem z Section buildera i efekt końcowy jest zadowalający:</p>
<p><img style="width: 801px; height: 561px;" src="/media/1056/przechwytywanie.jpg?width=801&amp;height=561" alt="widok kart postów" rel="6233" data-id="6233" /></p>
<p>Dziś krótko, ale używanie tag service jest dość proste i stwierdziłem, że nie ma co nadmiernie się rozpisywaćJ</p>
<p>Udanej Majówki!</p>
<p> </p>]]></body>
        </articleText>
      </article>
      <article id="6246" key="2a099c46-a88e-427c-b5cf-ea59cea8cbae" parentID="2097" level="3" creatorID="0" sortOrder="16" createDate="2017-05-07T21:54:38" updateDate="2017-05-23T17:05:34" nodeName="Widok postu, rozwinięcie" urlName="widok-postu-rozwiniecie" path="-1,2096,2097,6246" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Co zmieniło się w widoku postu?]]></shortDescription>
        <cardImage><![CDATA[6243]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017,Umbraco]]></tags>
        <title><![CDATA[Widok postu, rozwinięcie]]></title>
        <articleText id="6247" key="31125c65-af4b-4f80-b6d3-41b82b4da94d" parentID="6246" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T15:41:55" updateDate="2017-05-23T17:05:34" nodeName="Section1" urlName="section1" path="-1,2096,2097,6246,6247" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<h1>Widok postu, rozwinięcie.</h1>
<p><span>Tym razem o tym, co zmieniło się w widoku postu. Prototyp bloga jest już niemal gotowy. Zostało nieco pracy związanej z SEO. Strona wizualna projektu potrzebuje jedynie ostatnich szlifów i pierwsza wersja będzie gotowa. Z radością przedstawiam także logo mojego projektu:</span></p>
<p><span><img style="width: 371px; height: 176px;" src="/media/1011/logo_otwarty_kwadrat_253-x-120-px.png?width=371&amp;height=176" alt="logo webdotnet" rel="6098" data-id="6098" /></span></p>
<p> </p>
<p><span>Zdecydowałem się na treść postu po lewej stronie, a po prawej kolumnę na ¼  szerokości zawierającą dodatkowe informacje. Pierwszą informacją są Tagi, które można kliknąć by przejść do widoku listy wszystkich postów zawierających dany tag. Drugą, lista (aktualnie siedmiu, ale to może ulec zmianie) ostatnich postów z tej samej kategorii, co czytany przez użytkownika. Poniżej listy niedawno dodanych, znajduje się iframe z fanpagu na Facebooku. Na końcu, po treści postu, znajduje się sekcja z komentarzami na całą szerokość strony.</span></p>
<p><span><img style="width: 285px; height: 446px;" src="/media/1061/przechwytywcanie.jpg?width=285&amp;height=446" alt="panel boczny" rel="6245" data-id="6245" /></span></p>
<p> </p>
<p>Planuję także stworzyć sekcję z subskrypcją mailingową, ale w pierwszej kolejności mam zamiar dodać całą funkcjonalność, którą posiada obecny „brzydki” blog. Gdy to już się stanie, przepnę domenę i nowe posty będą się już pojawiać na nowej odsłonie bloga, która mam nadzieję, że się Ci spodoba J</p>
<p>Ostatnią rzeczą, którą podłączyłem do bloga, jest możliwość dzielenia się postami na „social mediach” lub mailowo. Nie chcąc budować tego samemu od początku, skorzystałem z gotowej implementacji z <a href="https://www.addthis.com/">https://www.addthis.com/</a>. Guziki do dzielenia się ze znajomymi pojawiają się po lewej stronie, chyba że przeglądamy na małym ekranie - wówczas u dołu. Wygląda to bardzo spójnie i mi osobiście przypadło do gustu. Jak dodać to samodzielnie do własnej strony, opiszę w kolejnym poście.</p>
<p><img style="width: 132px; height: 375px;" src="/media/1060/przecddhwytywanie.jpg?width=132&amp;height=375" alt="social share" rel="6244" data-id="6244" /></p>
<p>To już wszystko, co chciałem przekazać w ramach tego posta. Ostatnio skupiam się na implementacji nowych rzeczy, dlatego też nie mam tak dużo czasu na pisanie jak bym chciał.</p>
<p>Pozdrawiam, Kamil.</p>
<p> </p>]]></body>
        </articleText>
      </article>
      <article id="6258" key="abfd7d26-db29-4e12-8d31-532e0ec24f59" parentID="2097" level="3" creatorID="0" sortOrder="17" createDate="2017-05-07T23:54:38" updateDate="2017-05-23T17:05:34" nodeName="Dzielenie się postami poprzez „addthis”" urlName="dzielenie-sie-postami-poprzez-addthis" path="-1,2096,2097,6258" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Jak łatwo dodać na swoją stronę dzielenie się na social mediach]]></shortDescription>
        <cardImage><![CDATA[6256]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017,SocialMedia]]></tags>
        <title><![CDATA[Dzielenie się postami poprzez „addthis”]]></title>
        <articleText id="6259" key="e44c56a1-a753-4e26-b3b6-fbbbfaa2b636" parentID="6258" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T15:50:50" updateDate="2017-05-23T17:05:34" nodeName="Section1" urlName="section1" path="-1,2096,2097,6258,6259" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<h1><span>Dzielenie się postami poprzez „addthis”</span></h1>
<p>Praktycznie każdy blog posiada ułatwienia do dzielenia się postami z znajomymi. Oczywiście ja także chciałbym mieć taką funkcjonalność w swoim blogu, ale czy muszę to robić od zera? Nie! Podobnie jak z sekcją komentarzy w sieci, możemy znaleźć gotowe rozwiązania popularnych „Share buttons”. Instalacja jest prosta i dziś poprowadzę Cię przez instalacje takich guzików ze strony <a href="https://www.addthis.com/">https://www.addthis.com/</a></p>
<p>Rejestrujemy się na stronie, po czym naszym oczom ukazują się opcje, które możemy wybrać na stronie. Poza guzikami do dzielenia się, możemy skorzystać także z innych usług, jednak ja skupię się dziś jedynie na nich. Kliknijmy więc „Share Buttons”:</p>
<p><img style="width: 675px; height: 489px;" src="/media/1070/1.jpg?width=675&amp;height=489" alt="wybór narzędzia" rel="6257" data-id="6257" /></p>
<p>Wybierzmy teraz najbardziej interesujący nas wygląd guzików. Klikając na poszczególne opcje, mamy podgląd na żywo po prawej stronie, w prawym górnym rogu możemy także przełączać się między wersją mobile a zwykłą. Dzięki temu, zanim dodamy to na naszą stronę, widzimy co bierzemy i jak będzie to wyglądać na różnych urządzeniach. Ja wybrałem pierwszy z góry J</p>
<p>Następnie, mamy możliwość konfiguracji wyglądu i zawartości naszego paska z guzikami.</p>
<p><img style="width: 227.53623188405797px; height:500px;" src="/media/1062/2.jpg?width=227.53623188405797&amp;height=500" alt="wybór designu" rel="6249" data-id="6249" /></p>
<p>Jeżeli chodzi o „Social Networks” to w przeciwieństwie do tego, co jest napisane, ja rekomenduje wybrać samemu social media, do których guziki mają zostać wygenerowane. Do wyboru jest multum opcji, sprawdźcie, które serwisy was interesują i wybierzcie je J</p>
<p>W zakładce Design, możemy ustawić wygląd naszego paska, ja pozostawiłem to bez zmian, ponieważ domyślny wygląd najbardziej mi odpowiada. Jeżeli Twój blog jest w biało czarnych odcieniach i nie chcesz by guziki raziły w oczy swoimi kolorami, masz opcję by to zmienić właśnie w tym miejscu.</p>
<p><img style="width: 270.0170357751278px; height:500px;" src="/media/1063/3.jpg?width=270.0170357751278&amp;height=500" alt="ustawienia" rel="6250" data-id="6250" /><img style="width: 276.17328519855596px; height:500px;" src="/media/1064/4.jpg?width=276.17328519855596&amp;height=500" alt="style" rel="6251" data-id="6251" /></p>
<p><span>Warto także zajrzeć do sekcji zaawansowanych ustawień. Tu możemy ustawić, na których podstronach guziki mają, bądź nie mają się pojawiać. W jakim momencie layout ma zmienić się na wersję mobilną i od jakiej ilości udostępnień ma się pojawiać licznik pokazujący ich ilość.</span></p>
<p><span><img style="width: 290px; height:477px;" src="/media/1065/5.jpg?width=290&amp;height=477" alt="specyfikacja 1" rel="6252" data-id="6252" /><img style="width: 305px; height:460px;" src="/media/1066/6.jpg?width=305&amp;height=460" alt="specyfikacja 2" rel="6253" data-id="6253" /><img style="width: 298px; height:402px;" src="/media/1067/7.jpg?width=298&amp;height=402" alt="specyfikacja 3" rel="6254" data-id="6254" /></span></p>
<p> </p>
<p>Jeśli nie prowadzimy bloga w języku angielskim, warto również ustawić treść wiadomości wyświetlanych użytkownikowi.</p>
<p>Jeżeli jesteśmy już zadowoleni z efektu, klikamy „Continue” i naszym oczom ukażą się opcje, których możemy użyć przy podpinaniu guzików pod nasz serwis. Jako, że nie korzystam z serwisów wymienionych w kartach, wykorzystałem wersję HTML. Jedyne co trzeba teraz zrobić, to wkleić Skrypt na końcu body w naszym serwisie.</p>
<p><img style="width: 790px; height: 689px;" src="/media/1068/8.jpg?width=790&amp;height=689" alt="kod do skopiowania" rel="6255" data-id="6255" /></p>
<p>To już wszystko na dziś, jak mogliście się przekonać, dodawanie guzików do dzielenia się postem poprzez addthis jest dość proste i intuicyjne.</p>
<p>Pozdrawiam, Kamil</p>]]></body>
        </articleText>
      </article>
      <article id="6265" key="a9de2ab5-753b-437a-95c4-c783c54dde34" parentID="2097" level="3" creatorID="0" sortOrder="18" createDate="2017-05-14T21:54:38" updateDate="2017-05-23T17:05:34" nodeName="404 w umbraco" urlName="404-w-umbraco" path="-1,2096,2097,6265" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Jak dodać swoją stronę 404 w Umbraco]]></shortDescription>
        <cardImage><![CDATA[6264]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017,Umbraco]]></tags>
        <title><![CDATA[404 w umbraco]]></title>
        <articleText id="6266" key="ec90a807-091e-4512-8dd8-7a58776b7be1" parentID="6265" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T15:55:50" updateDate="2017-05-23T17:05:34" nodeName="Section1" urlName="section1" path="-1,2096,2097,6265,6266" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<h1>404 w umbraco</h1>
<p>Każda witryna powinna mieć swoją wersję strony 404. Wyświetla się ona, gdy użytkownik jest na właściwej domenie, jednak próbuje wyświetlić nieistniejącą podstronę. W tym poście opiszę, jak taką stronę utworzyć w umbraco.</p>
<p>Na początek zalogujmy się do Back Office umbraco i stwórzmy nową stronę. Zadbajmy także o to, aby mogła ona być poprawnie wygenerowana przez umbraco. W moim przypadku wiązało się to z dodaniem nowego contentu typu „Page” i dodanie do niego sekcji, które mają zostać wyświetlone na tej stronie.</p>
<p>Po utworzeniu i sprawdzeniu czy działa, przejdźmy do zakładki właściwości i skopiujmy sobie ID naszego Noda.</p>
<p><img style="width: 804px; height: 405px;" src="/media/1071/2.jpg?width=804&amp;height=405" alt="id noda w umbraco" rel="6261" data-id="6261" /></p>
<p><span>Przechodzimy teraz do naszego projektu umbraco i wyszukujemy plik, umbracoSettings.config w XML-u musimy zmienić zawartość error404 na ID, które skopiowaliśmy z Back Office.</span></p>
<p><span><img style="width: 804px; height: 312px;" src="/media/1072/3.jpg?width=804&amp;height=312" alt="konfiguracja 404" rel="6262" data-id="6262" /></span></p>
<p> </p>
<p><span>Po przebudowaniu projektu, strona 404 powinna się już poprawnie wyświetlać na lokalnym serwerze. Żeby zadziałała także na hostowanym, musiałem dodać w głównym WebConfigu tę linijkę:</span></p>]]></body>
        </articleText>
        <codeSnippet id="6267" key="3619d128-a8b4-4fac-80b5-f9de7bca810d" parentID="6265" level="4" creatorID="0" sortOrder="1" createDate="2017-05-23T15:56:03" updateDate="2017-05-23T17:05:34" nodeName="code" urlName="code" path="-1,2096,2097,6265,6267" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[html]]></languagePicker>
          <code><![CDATA[<httpErrors existingResponse="PassThrough" />]]></code>
        </codeSnippet>
        <articleText id="6268" key="8c639355-bdcc-47a4-8fd6-251fb5365184" parentID="6265" level="4" creatorID="0" sortOrder="2" createDate="2017-05-23T15:56:43" updateDate="2017-05-23T17:05:34" nodeName="Section1 (1)" urlName="section1-1" path="-1,2096,2097,6265,6268" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p>Należy to wkleić w sekcji &lt;system.webServer&gt;</p>
<p>Po tej operacji wszystko powinno już śmigać, a po wpisaniu błędnego linka, naszym oczom powinna ukazać się strona 404.</p>
<p><img style="width: 799px; height: 551px;" src="/media/1073/4.jpg?width=799&amp;height=551" alt="strona 404 w webdotnet" rel="6263" data-id="6263" /></p>
<p>To by było na tyle, dodawanie strony 404 w umbraco jest dość proste.</p>
<p>Pozdrawiam, Kamil.</p>]]></body>
        </articleText>
      </article>
      <article id="6274" key="519479f5-c11e-45d2-a9cb-715c2d6077a3" parentID="2097" level="3" creatorID="0" sortOrder="19" createDate="2017-05-14T23:54:38" updateDate="2017-05-23T17:05:34" nodeName="Pobieranie Contentu z Umbraco część 1" urlName="pobieranie-contentu-z-umbraco-czesc-1" path="-1,2096,2097,6274" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Jak pobierać content z Back Office?]]></shortDescription>
        <cardImage><![CDATA[6273]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017,Umbraco]]></tags>
        <title><![CDATA[Pobieranie Contentu z Umbraco część 1]]></title>
        <articleText id="6275" key="9e5f1768-cad0-4ffd-821f-cf1addba5201" parentID="6274" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T16:03:55" updateDate="2017-05-23T17:05:34" nodeName="Section1" urlName="section1" path="-1,2096,2097,6274,6275" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<h1>Pobieranie Contentu z Umbraco część 1</h1>
<p>Ten post będzie pierwszym postem z cyklu jak pobierać content, który dodaliśmy w Back Office w naszym kodzie C#. Dziś opiszę jak znaleźć interesujący nas node w contencie umbraco.</p>
<p>Jedną z opcji, którą bardzo często wykorzystuję, jest pobieranie contentu za pomocą Controllerów. Całą operację przedstawię za pomocą podstrony, która wyświetla wszystkie posty otagowane danym tekstem. Aby móc skorzystać z tej metody, musimy stworzyć dowolny Document Type i zapamiętać jego alias.</p>
<p><img style="width: 500px; height:222.77847309136422px;" src="/media/1075/1.jpg?width=500&amp;height=222.77847309136422" alt="alias w back office" rel="6270" data-id="6270" /></p>
<p><span>Teraz przechodzimy do kodu i tworzymy Controller dziedziczący po RenderMvcController i nazywamy go [Nasz alias doc typu]Controller i overridujemy metodę Index</span></p>]]></body>
        </articleText>
        <codeSnippet id="6276" key="03910fc8-d858-4dfb-9b38-1b7cfeaaec43" parentID="6274" level="4" creatorID="0" sortOrder="1" createDate="2017-05-23T16:04:17" updateDate="2017-05-23T17:05:34" nodeName="code" urlName="code" path="-1,2096,2097,6274,6276" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[csharp]]></languagePicker>
          <code><![CDATA[public class TagController : RenderMvcController
    {
        public override ActionResult Index(RenderModel model)
        {
            var content = model.Content;
        }
    }]]></code>
        </codeSnippet>
        <articleText id="6277" key="a8c244a1-d1cd-46b0-8491-28887707b1c2" parentID="6274" level="4" creatorID="0" sortOrder="2" createDate="2017-05-23T16:04:29" updateDate="2017-05-23T17:05:34" nodeName="Section1 (1)" urlName="section1-1" path="-1,2096,2097,6274,6277" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p>W parametrze metody, możemy sięgnąć po IPublishedContent poprzez property o nazwie Content. Z kolei z niego, możemy wyciągnąć wszelkie inne teksty, bądź dzieci w drzewku contentu, więcej o tym będzie w części drugiej.</p>
<p>Innym sposobem na dojście do interesującego nas noda w drzewku, jest pobranie jego rodziców, którzy znajdują się w „korzeniu” i znalezienie interesujących nas rzeczy np. poprzez Linq. Ja w ten sposób pobieram wszystkie posty. Przejdźmy więc do kodu. W projekcie umbraco, mamy możliwość skorzystania z UmbracoHelper-a, który zawiera mnóstwo przydatnych rzeczy, a także zcachowaną zawartość naszego contentu.  Myślę, że dobrym pomysłem będzie stworzenie klasy, która zawiera statyczną property pobierającą ten Helper z kontekstu umbraco. To przykład mojej klasy:</p>]]></body>
        </articleText>
        <codeSnippet id="6278" key="8fcdf0f2-1dda-49d1-86a7-fa7075cddeac" parentID="6274" level="4" creatorID="0" sortOrder="3" createDate="2017-05-23T16:04:52" updateDate="2017-05-23T17:05:34" nodeName="code (1)" urlName="code-1" path="-1,2096,2097,6274,6278" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[csharp]]></languagePicker>
          <code><![CDATA[public class NodeHelper
    {
        private static UmbracoHelper _umbracoHelper;

        public static UmbracoHelper Umbraco => _umbracoHelper ?? (_umbracoHelper = new 
                          UmbracoHelper(UmbracoContext.Current));       
    }]]></code>
        </codeSnippet>
        <articleText id="6279" key="d481f98d-bc8c-404d-99ed-9cb6411764ac" parentID="6274" level="4" creatorID="0" sortOrder="4" createDate="2017-05-23T16:05:04" updateDate="2017-05-23T17:05:34" nodeName="Section1 (2)" urlName="section1-2" path="-1,2096,2097,6274,6279" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p>Po stworzeniu takiej klasy, możemy pobrać Root Node naszego contentu.</p>]]></body>
        </articleText>
        <codeSnippet id="6280" key="e267bc1e-00d2-41a1-99c0-1a11598af4c9" parentID="6274" level="4" creatorID="0" sortOrder="5" createDate="2017-05-23T16:05:14" updateDate="2017-05-23T17:05:34" nodeName="code (2)" urlName="code-2" path="-1,2096,2097,6274,6280" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[csharp]]></languagePicker>
          <code><![CDATA[var rootNodes = NodeHelper.Umbraco.TypedContentAtRoot();]]></code>
        </codeSnippet>
        <articleText id="6281" key="d5eee423-d6e7-4652-872e-6a65fd18e1b3" parentID="6274" level="4" creatorID="0" sortOrder="6" createDate="2017-05-23T16:06:01" updateDate="2017-05-23T17:05:34" nodeName="Section1 (3)" urlName="section1-3" path="-1,2096,2097,6274,6281" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p><span>Korzystając z metody TypedContentAtRoot, otrzymujemy listę wszystkich „korzeni” w naszej aplikacji.</span></p>
<p><span><img style="width: 500px; height:410.3053435114504px;" src="/media/1076/2.jpg?width=500&amp;height=410.3053435114504" alt="content tree" rel="6271" data-id="6271" /></span></p>
<p> </p>
<p><span>Struktura postów w moim projekcie wygląda następująco: Posty -&gt; Kategoria -&gt; Post</span></p>
<p><span><img style="width: 450px; height:299px;" src="/media/1077/3.jpg?width=450&amp;height=299" alt="content tree" rel="6272" data-id="6272" /></span></p>
<p> </p>
<p><span>Aby pobrać wszystkie nody zawierające posty, muszę najpierw w Roocie wybrać te Posty, a z nich wziąć wszystkie dzieci ich dzieci. Spłaszczymy tym nieco strukturę, pomijając kategorie, a wybierając same artykuły. W kodzie można to załatwić następująco:</span></p>]]></body>
        </articleText>
        <codeSnippet id="6282" key="2d250af0-fcd7-4105-8077-1b5adf8dbe5e" parentID="6274" level="4" creatorID="0" sortOrder="7" createDate="2017-05-23T16:06:13" updateDate="2017-05-23T17:05:34" nodeName="code (3)" urlName="code-3" path="-1,2096,2097,6274,6282" isDoc="" nodeType="6119" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="codeSnippet">
          <languagePicker><![CDATA[csharp]]></languagePicker>
          <code><![CDATA[var articlesRootNode = rootNodes.First(x => x.DocumentTypeAlias == "articlesRoot");
      var allArticles = articlesRootNode.Children.SelectMany(x => x.Children).ToList();]]></code>
        </codeSnippet>
        <articleText id="6283" key="d6106270-50bd-4ea2-adb8-d0a39cb90aca" parentID="6274" level="4" creatorID="0" sortOrder="8" createDate="2017-05-23T16:06:29" updateDate="2017-05-23T17:05:34" nodeName="Section1 (4)" urlName="section1-4" path="-1,2096,2097,6274,6283" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<p>W zmiennej allArticles, mam listę typu IPublishedContent, z której mogę wyciągnąć interesujące mnie dane na temat postów. Do pobierania contenu możemy także wykorzystać ContentService. Nie jest to jednak zalecane, jeśli chcemy jedynie czytać dane, ponieważ ContentService odpytuje bezpośrednio bazę danych, a UmbracoHelper, jak już wspomniałem na początku, nie.</p>
<p>To już koniec części pierwszej. W kolejnej opiszę, w jaki sposób możemy wyciągać teksty i inne properties, które mamy w umbraco, a możemy je dodać do Document typ-ów.</p>]]></body>
        </articleText>
      </article>
      <article id="6291" key="f3878b17-5a8c-4051-9bf9-78a44274e8af" parentID="2097" level="3" creatorID="0" sortOrder="20" createDate="2017-05-21T21:54:38" updateDate="2017-05-23T17:05:34" nodeName="301 URL tracker Umbraco" urlName="301-url-tracker-umbraco" path="-1,2096,2097,6291" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Paczka z prostym zarządzaniem redirectami wewnątrz umbraco]]></shortDescription>
        <cardImage><![CDATA[6285]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017,Umbraco]]></tags>
        <title><![CDATA[301 URL tracker Umbraco]]></title>
        <articleText id="6292" key="4765f1e5-ff70-4700-90e1-3b2a7abe2eba" parentID="6291" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T16:13:00" updateDate="2017-05-23T17:05:34" nodeName="Section1" urlName="section1" path="-1,2096,2097,6291,6292" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<h1>301 URL tracker Umbraco</h1>
<p>Post będzie krótki, ale mam nadzieję, że przydatny J Url Tracker to rozszerzenie do Back Office umbraco, które pozwala na łatwe zarządzanie linkami wewnątrz aplikacji, gdy np. chcemy stworzyć przekierowania na stronę jakiegoś konkursu, albo po prostu mamy starą strukturę strony i chcemy przekierować na nowe linki.</p>
<p>Po wejściu na zakładkę Content, mamy do dyspozycji dodatkowy Tab, „Url Tracker”</p>
<p><img style="width: 469px; height:141px;" src="/media/1084/1.jpg?width=469&amp;height=141" alt="taby backoffice" rel="6290" data-id="6290" /></p>
<p><span>Po kliknięciu przycisku „Create”, możemy stworzyć nowe przekierowanie. Najpierw zajmijmy się sekcją Requred:</span></p>
<p><span><img style="width: 800px; height: 259px;" src="/media/1083/requred.jpg?width=800&amp;height=259" alt="sekcja wymagane" rel="6289" data-id="6289" /></span></p>
<p> </p>
<p>Z pomocą kombinacji RootNode oraz Old URL decydujemy, jaki link ma być przekierowany na inny za pomocą tego narzędzia. Opcjonalnie, możemy również dodać wymagane parametry w linku. Możemy także skorzystać z wyrażeń regularnych i w takim przypadku wszystkie linki spełniające to wyrażenie regularne zostaną przekierowane.</p>
<p>Następnie w Redirect Node możemy wybrać noda, do którego użytkownik ma zostać przekierowany (link zostanie pobrany z właściwości tego noda) lub wpisać samodzielnie URL.</p>
<p>W sekcji Optional, należy zdecydować czy redirect jest permanentny (301) czy tymczasowy (302). Jeżeli przeglądarka, jako zwrot otrzyma 302 będzie sprawdzać czy przekierowanie nadal jest, natomiast przy 301 przeglądarka zapamiętuje to i przy kolejnej próbie wejścia na link, który zwrócił 301, automatycznie jesteśmy przekierowani na odpowiednią stronę bez pytania serwera.</p>
<p><img style="width: 670px; height: 307px;" src="/media/1082/overview.jpg?width=670&amp;height=307" alt="lista redirectów" rel="6288" data-id="6288" /></p>
<p><span>Jeszcze jedną bardzo przydatną funkcjonalnością jest „404 Not found view” dostępny po naciśnięciu guzika z takim napisem w zakładce trackera. Zawiera listę wszystkich requestów, które zwróciły 404, wiec możemy sprawdzić gdzie użytkownik próbował się dostać. Z poziomu tego widoku możemy od razu stworzyć redirect do linka, który np. bardzo często się powtarza, a domyślamy się gdzie użytkownik próbował się dostać.</span></p>
<p><span><img style="width: 669px; height: 345px;" src="/media/1080/404.jpg?width=669&amp;height=345" alt="lista wejść 404" rel="6286" data-id="6286" /></span></p>
<p><span>Pozdrawiam, Kamil.</span></p>
<p> </p>
<p> </p>]]></body>
        </articleText>
      </article>
      <article id="6295" key="b3063137-4921-4d0d-8c80-7f2d64933dcc" parentID="2097" level="3" creatorID="0" sortOrder="21" createDate="2017-05-21T23:54:38" updateDate="2017-05-23T17:05:34" nodeName="Plany" urlName="plany" path="-1,2096,2097,6295" isDoc="" nodeType="2093" creatorName="Admin" writerName="Admin" writerID="0" template="5092" nodeTypeAlias="article">
        <shortDescription><![CDATA[Plany na najbliższy tydzień]]></shortDescription>
        <cardImage><![CDATA[6294]]></cardImage>
        <tags><![CDATA[DajSiePoznać2017]]></tags>
        <title><![CDATA[Plany]]></title>
        <articleText id="6296" key="631f7365-ab11-4b81-a08f-06f2d1821b4f" parentID="6295" level="4" creatorID="0" sortOrder="0" createDate="2017-05-23T16:21:07" updateDate="2017-05-23T17:05:34" nodeName="Section1" urlName="section1" path="-1,2096,2097,6295,6296" isDoc="" nodeType="2100" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="articleText">
          <body><![CDATA[<h1>Plany</h1>
<p>Zbliża się już koniec miesiąca, ten post będzie krótką listą rzeczy, które chciałbym zrealizować zanim maj się skończy. Kłopoty zdrowotne niestety trochę psują mi mój plan, mam spore problemy z skupieniem się, na czymkolwiek przez grypę. Jeżeli jednak wszystko pójdzie po mojej myśli to powinno się udać zrobić deployment nowej wersji mojego bloga.</p>
<p>Aby blog mógł ujrzeć światło dzienne muszę jeszcze zrobić:</p>
<ul>
<li>Widok wszystkich postów na blogu</li>
<li>Sitemape</li>
<li>SEO optymalizacje</li>
<li>Możliwość subskrypcji po RSS</li>
<li>Wypełnić stronę główną i „O mnie” właściwą treścią</li>
<li> Przepisać wszystkie posty z starego bloga na nowego.</li>
</ul>
<p> </p>
<p>Jeśli powyższa lista zostanie zrealizowana, będę mógł przenieść się już na nową platformę. Mam nadzieję, że się uda :)</p>
<p> </p>
<p>Pozdrawiam serdecznie, Kamil.</p>]]></body>
        </articleText>
      </article>
    </category>
  </articlesRoot>
  <Sitemap id="6110" key="39d41873-ddd8-4132-bef6-97808dfaa831" parentID="-1" level="1" creatorID="0" sortOrder="2" createDate="2017-05-09T20:35:53" updateDate="2017-05-09T20:38:35" nodeName="Sitemap" urlName="sitemap" path="-1,6110" isDoc="" nodeType="6109" creatorName="Admin" writerName="Admin" writerID="0" template="0" nodeTypeAlias="Sitemap" />
</root>